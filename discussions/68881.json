[
  {
    "Id": "234362",
    "ThreadId": "68881",
    "Html": "<p>Hi!</p>\r\n<p>We've been trying to use the Obtics framework but got stuck with some problems. The problem seems to be quite strange.</p>\r\n<p>I can email the complete 'dummy' project which is buildable and shows the problem very clearly.</p>\r\n<p>It's a simple WPF project, with one window, which does nothing and holds only one listbox. ListBox is only there to check how Obtics works with WPF - and just as declared, it works fine.</p>\r\n<p>ListBox is supposed to show all Orders (exposed by a property, which getter returns an Obtics query) of one Customer created on Window_Loaded. The p\r\nroblem is when I try to catch notifications in code myself. Somehow notifications are fired only when I enumerate the property after the&nbsp;subscription.</p>\r\n<p>Here's the code:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Window1 : Window\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> Window1()\r\n        {\r\n            InitializeComponent();\r\n\r\n            Loaded += <span style=\"color:Blue\">new</span> RoutedEventHandler(Window1_Loaded);\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> Window1_Loaded(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            Customer c = <span style=\"color:Blue\">new</span> Customer { CustomerId = 1 };\r\n            <span style=\"color:Green\">//lstOrders.DataContext = c;                    // When uncommented, binding works fine</span>\r\n\r\n            ((INotifyCollectionChanged)c.Orders).CollectionChanged += CustomerOrders_CollectionChanged;\r\n            c.Orders.GetEnumerator().MoveNext();            <span style=\"color:Green\">// If you comment this, or move it before the subscription - notifications are not received</span>\r\n\r\n            Order.AllOrders.Add(<span style=\"color:Blue\">new</span> Order { OrderId = 1, DueDate = DateTime.Now, CustomerId = 1 });\r\n            Order.AllOrders.Add(<span style=\"color:Blue\">new</span> Order { OrderId = 2, DueDate = DateTime.Now, CustomerId = 1 });\r\n            Order.AllOrders.Add(<span style=\"color:Blue\">new</span> Order { OrderId = 3, DueDate = DateTime.Now, CustomerId = 2 });\r\n            Order.AllOrders.Add(<span style=\"color:Blue\">new</span> Order { OrderId = 4, DueDate = DateTime.Now, CustomerId = 1 });\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> CustomerOrders_CollectionChanged(<span style=\"color:Blue\">object</span> sender, NotifyCollectionChangedEventArgs e)\r\n        {\r\n            MessageBox.Show(<span style=\"color:#A31515\">&quot;Orders collection modified&quot;</span>);\r\n        }\r\n    }\r\n</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Order : INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">int</span> _OrderId;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> OrderId\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _OrderId; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (_OrderId != value)\r\n                {\r\n                    _OrderId = value;\r\n                    RaisePropertyChanged(<span style=\"color:#A31515\">&quot;OrderId&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">protected</span> DateTime _DueDate;\r\n        <span style=\"color:Blue\">public</span> DateTime DueDate\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _DueDate; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (_DueDate != value)\r\n                {\r\n                    _DueDate = value;\r\n                    RaisePropertyChanged(<span style=\"color:#A31515\">&quot;DueDate&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">int</span> _CustomerId;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> CustomerId\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _CustomerId; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (_CustomerId != value)\r\n                {\r\n                    _CustomerId = value;\r\n                    RaisePropertyChanged(<span style=\"color:#A31515\">&quot;CustomerId&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">static</span> ObservableCollection&lt;Order&gt; _AllOrders = <span style=\"color:Blue\">new</span> ObservableCollection&lt;Order&gt;();\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> ObservableCollection&lt;Order&gt; AllOrders\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> _AllOrders;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> RaisePropertyChanged(<span style=\"color:Blue\">string</span> name)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n                PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(name));\r\n        }\r\n\r\n    }\r\n\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Customer : INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">int</span> _CustomerId;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> CustomerId\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _CustomerId; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (_CustomerId != value)\r\n                {\r\n                    _CustomerId = value;\r\n                    RaisePropertyChanged(<span style=\"color:#A31515\">&quot;CustomerId&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> IEnumerable&lt;Order&gt; Orders\r\n        {\r\n            <span style=\"color:Blue\">get</span> \r\n            {\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">from</span> o <span style=\"color:Blue\">in</span> Order.AllOrders\r\n                       <span style=\"color:Blue\">where</span> o.CustomerId == <span style=\"color:Blue\">this</span>.CustomerId\r\n                       <span style=\"color:Blue\">select</span> o;\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> RaisePropertyChanged(<span style=\"color:Blue\">string</span> name)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n                PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(name));\r\n        }\r\n\r\n\r\n    }\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre>So, as a workaround we can create an empty subscription and then enumerate each such property in the constructor. But it definitely seems not pretty.</pre>\r\n<pre>Any comments?</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-14T09:09:54.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234502",
    "ThreadId": "68881",
    "Html": "<p>Hi,</p>\r\n<p>This may surprise you but it is actually by design.</p>\r\n<p>The idea is that most of&nbsp;those CollectionChanged events (except the Reset event)&nbsp;are incremental changes on a given base collection. This base collection can be aquired using the enumerator. Without first getting this base collection the incremental change events wouldn't make sense. The Observable linq queries will hold back change events untill at least some&nbsp;client has read (aquired the enumerator) the base collection.</p>\r\n<p>Observable sequences that are (temporarily) not used do not send change events. This may seem silly but leads to some very nice optimizations.</p>\r\n<p>Naturaly this has&nbsp;NOT been documented (I sooo badly need a user guide; just too much to do).</p>\r\n<ul>\r\n<li>Observable Linq queries will not send change events untill some client aquires its enumerator</li>\r\n<li>Observable Linq queries will STOP sending change events after sending a&nbsp;RESET event, untill some client&nbsp;aquires its enumerator again</li>\r\n<li>Observable Values will not send change events untill some client reads its value and then only one until some client reads it again.</li>\r\n</ul>\r\n<p>When manually registering for CollectionChanged events make sure that:</p>\r\n<ol>\r\n<li>you read the contents from the same object instance as the one where your registered for change events.</li>\r\n<li>make sure you unregister from the same object instance when your are done listening and DO unregister.</li>\r\n</ol>\r\n<p>Obtics will try it's hardest to return the same object instance at each call to 'c.Orders' but it is not a quarantee. Better store an instance in a field and use that.</p>\r\n<p>For those, I suspect rare cases where you want to know when the results of an observable linq query changes without actually being interested in the query contents itself; I'd suggest you create a&nbsp;nice extension&nbsp;method that would return an object with a 'Changed' event and that does all the 'not so pretty' stuff under the hood. That shouldn't be to hard and when you have it, with your permission,&nbsp;I would like to refer to it in the wiki.</p>\r\n<p>Hope this clarifies it a bit and any sugestions are very welcome.</p>\r\n<p>Regs,</p>\r\n<p>Thomas</p>",
    "PostedDate": "2009-09-14T15:09:42.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234628",
    "ThreadId": "68881",
    "Html": "<p>Thanks Thomas,</p>\r\n<p>It's clear now why enumerator has to be called, but I still don't understand why I have to subscribe at least once before calling the enumerator.&nbsp;</p>\r\n<p>Maybe the answer is in your explanation, but apparently i didn't find it :)</p>",
    "PostedDate": "2009-09-15T00:24:53.803-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234695",
    "ThreadId": "68881",
    "Html": "<p>Hi,</p>\r\n<p>That can be explained as follows:</p>\r\n<p>Obtics is a&nbsp;concurrent system and it assumes that when you get the enumerator before you register for change events that you &quot;missed all the events in between&quot; and therefore do not have a valid base collection to apply all subsequent incremental changes to. It can also be interpreted as &quot;You were temporarily not interested in changes to this result&quot;. So kicking the observable linq query to send change events is only valid when you have at least one listener attached.</p>\r\n<p>Btw. in the list in my previous posting containing all the 'Will not send' points; It should actually be read as 'May not send'.</p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>",
    "PostedDate": "2009-09-15T05:50:28.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]