[
  {
    "Id": "434645",
    "ThreadId": "210319",
    "Html": "<p>Thomas,</p>\r\n<p>This may be a very trivial question nveretheless, I have spend some considerable time trying to get it to work.</p>\r\n<p>I have an ExpressionObserver.Execute Statement as below</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> IEnumerable&lt;InBoundSummary&gt; OrdersGroupedByMonikers\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span>\r\n                    OE.Async(\r\n                            ExpressionObserver.Execute(\r\n                                () =&gt;\r\n                                    (\r\n                                        custOrdersList.Where(p=&gt;loggedUser.Senders.FirstOrDefault(c =&gt; c.IsExternal &amp;&amp; c.SenderName == p.TAG_142) != <span style=\"color:blue\">null</span>).GroupBy(x =&gt; x.Moniker)\r\n                                            .Select(x =&gt; <span style=\"color:blue\">new</span> InBoundSummary\r\n                                            {\r\n                                                Moniker = x.First().Moniker,\r\n                                                ExecShares = x.Sum(p =&gt; p.ExecSharesCum),\r\n                                                TotalShares = x.Sum(p =&gt; p.IsActive ? p.OrdSize : p.ExecSharesCum),\r\n                                                ExecPrice = x.Sum(p =&gt; p.ExecSharesCum &gt; 0 ? (p.ExecSharesCum * p.AvgPriceCum) : 0),\r\n                                                TotalPrice = x.Sum(p =&gt; p.IsActive ? (p.OrdSize * p.Close) : (p.ExecSharesCum * p.AvgPriceCum)),\r\n                                            }).OrderByDescending(c =&gt; c.Moniker)\r\n                                    )\r\n                            ).Cascade()\r\n                        );\r\n            }\r\n        }\r\n</pre>\r\n<pre>All I am trying to do is get the <strong>Sum totals </strong>for ExecShares, TotalShares, ExecPrice and TotalPrice from OrdersGroupedByMonikers. However, following the following does not generate the result for me.</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">public</span> IValueProvider&lt;InBoundSummary&gt; OrdersGroupedByMonikersTotal\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> ExpressionObserver.Execute(\r\n                    () =&gt;\r\n                        (\r\n                            <span style=\"color:blue\">new</span> InBoundSummary\r\n                            {\r\n                                ExecShares = OrdersGroupedByMonikers.Sum(p =&gt; p.ExecShares),\r\n                                ExecPrice = OrdersGroupedByMonikers.Sum(p =&gt; p.ExecPrice),\r\n                                TotalPrice = OrdersGroupedByMonikers.Sum(p =&gt; p.TotalPrice),\r\n                                TotalShares = OrdersGroupedByMonikers.Sum(p =&gt; p.TotalShares),\r\n                                AvgPrice = 0,\r\n                                TotalArrival = 0,\r\n                                TotalVWAP = 0\r\n                            }\r\n                        ) \r\n                ).Concrete();\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre>Is this because i am generating a  new InBoundSummary each time.</pre>\r\n<pre>Thanks</pre>\r\n<pre>Vinay</pre>\r\n</div>",
    "PostedDate": "2010-04-23T07:52:44.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]