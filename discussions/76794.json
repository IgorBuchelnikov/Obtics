[
  {
    "Id": "262553",
    "ThreadId": "76794",
    "Html": "<p>After using Obtics for several hours, we needed to create a custom mapping. :)</p>\r\n<p>It took several hours to figure out how make the mapping and it's hard to know if we did it properly from an efficiency perspective.&nbsp; (For example, will the compilation cache work properly?)</p>\r\n<p>For other users of the website, it's worth noting that the MyEnumerable code in Obtics' CustomMapping project has another example that's not on the website.</p>\r\n<p>Here are the methods that we mapped.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>        [ExpressionObserverMapping(<span style=\"color:Blue\">typeof</span>(Observable))]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DecimalMeasure&lt;T&gt; Sum&lt;T&gt;(<span style=\"color:Blue\">this</span> IEnumerable&lt;DecimalMeasure&lt;T&gt;&gt; list) <span style=\"color:Blue\">where</span> T : Quantity\r\n        {\r\n            <span style=\"color:Blue\">return</span> list.Aggregate(<span style=\"color:Blue\">new</span> DecimalMeasure&lt;T&gt;(0, Quantity.GetDefaultUnit&lt;T&gt;()), (total, item) =&gt; total + item);\r\n        }\r\n\r\n        [ExpressionObserverMapping(<span style=\"color:Blue\">typeof</span>(Observable))]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DecimalMeasure&lt;T&gt; Sum&lt;TSource, T&gt;(<span style=\"color:Blue\">this</span> IEnumerable&lt;TSource&gt; list, Func&lt;TSource, DecimalMeasure&lt;T&gt;&gt; selector) <span style=\"color:Blue\">where</span> T : Quantity\r\n        {\r\n            <span style=\"color:Blue\">return</span> list.Aggregate(<span style=\"color:Blue\">new</span> DecimalMeasure&lt;T&gt;(0, Quantity.GetDefaultUnit&lt;T&gt;()), (total, item) =&gt; total + selector(item));\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And here is the inner class for Observable:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt; Sum&lt;T&gt;(IEnumerable&lt;DecimalMeasure&lt;T&gt;&gt; list) <span style=\"color:Blue\">where</span> T : Quantity\r\n            {\r\n                <span style=\"color:Blue\">return</span> Obtics.Collections.ObservableEnumerable.Aggregate(list, 0m * Quantity.GetDefaultUnit&lt;T&gt;(), (total, item) =&gt; total + item);\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt; Sum&lt;TSource, T&gt;(IEnumerable&lt;TSource&gt; list, Func&lt;TSource, DecimalMeasure&lt;T&gt;&gt; selector) <span style=\"color:Blue\">where</span> T : Quantity\r\n            {\r\n                <span style=\"color:Blue\">return</span> Obtics.Collections.ObservableEnumerable.Aggregate(list, 0m * Quantity.GetDefaultUnit&lt;T&gt;(), (total, item) =&gt; total + selector(item));\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt; Sum&lt;TSource, T&gt;(IEnumerable&lt;TSource&gt; list, Func&lt;TSource, IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt;&gt; selector) <span style=\"color:Blue\">where</span> T : Quantity\r\n            {\r\n                <span style=\"color:Green\">// Performance: This one still has selector2 as a variable, but it's from the first lambda so I'm not sure if Obtics figures that out.</span>\r\n                <span style=\"color:Blue\">return</span> ExpressionObserver.Execute(list, selector, (list2, selector2) =&gt;\r\n                    list2.Select(s =&gt; selector2(s).Value).Sum());\r\n            }\r\n\r\n<br>Hopefully this will help out some people when making their own mappings.</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-12-01T19:00:28.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "262685",
    "ThreadId": "76794",
    "Html": "<p>Hi,</p>\r\n<p>This is a very usefull example, thanks.</p>\r\n<p>For performance reasons I would advise to try not to use ExpressionObserver.Execute in often called code. Try to use ExpressionObserver.Compile instead. Store the precompiled expression in a static variable an call that from your method.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">static</span> Func&lt;IEnumerable&lt;TSource&gt;, Func&lt;TSource, IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt;&gt;, IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt;&gt; _Sum =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpressionObserver.Compile(<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IEnumerable&lt;TSource&gt; list, Func&lt;TSource, IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt;&gt; selector) =&gt;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list.Select(s =&gt; selector(s).Value).Sum())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt; Sum&lt;TSource, T&gt;(IEnumerable&lt;TSource&gt; list, Func&lt;TSource, IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt;&gt; selector) <span style=\"color:Blue\">where</span> T : Quantity<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <span style=\"color:Blue\">return</span> _Sum(list, selector); }</p>\r\n<p>As an alternative you could use the lower level ObservableEnumerable methods that you used in two of your mapped methods.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt; Sum&lt;TSource, T&gt;(IEnumerable&lt;TSource&gt; list, Func&lt;TSource, IValueProvider&lt;DecimalMeasure&lt;T&gt;&gt;&gt; selector) <span style=\"color:Blue\">where</span> T : Quantity\r\n            { <span style=\"color:Blue\">return</span> Obtics.Collections.ObservableEnumerable.Sum(Obtics.Collections.ObservableEnumerable.Select(list, selector)); }\r\n\r\n</pre>\r\n</div>\r\n<p>Regards,</p>\r\n<p>Thomas.</p>",
    "PostedDate": "2009-12-02T04:22:05.283-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "262853",
    "ThreadId": "76794",
    "Html": "<p>Using the Select method works great.&nbsp; Don't know why I didn't think of that in the first place. :)&nbsp; Thanks for the improvement and for the caching tip!</p>",
    "PostedDate": "2009-12-02T10:59:46.227-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]