[
  {
    "Id": "261067",
    "ThreadId": "76378",
    "Html": "<p>I'm trying to make an observable&nbsp;expression involving a method call.</p>\r\n<p>Here is a simplified example of my problem:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ObticsTests\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">sealed</span> <span style=\"color:Blue\">class</span> Multiplier : INotifyPropertyChanged\r\n        {\r\n            <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">int</span> factor;\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> Factor\r\n            {\r\n                <span style=\"color:Blue\">get</span>\r\n                {\r\n                    <span style=\"color:Blue\">return</span> factor;\r\n                }\r\n                <span style=\"color:Blue\">set</span>\r\n                {\r\n                    <span style=\"color:Blue\">if</span> (factor == value)\r\n                    {\r\n                        <span style=\"color:Blue\">return</span>;\r\n                    }\r\n                    factor = value;\r\n                    OnPropertyChanged(<span style=\"color:#A31515\">&quot;Factor&quot;</span>);\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> Multiply(<span style=\"color:Blue\">int</span> value)\r\n            {\r\n                <span style=\"color:Blue\">return</span> Factor * value;\r\n            }\r\n\r\n            <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnPropertyChanged(<span style=\"color:Blue\">string</span> propertyName)\r\n            {\r\n                <span style=\"color:Blue\">var</span> handler = PropertyChanged;\r\n                <span style=\"color:Blue\">if</span> (handler != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    handler(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n        }\r\n\r\n        [Fact]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> ExpressionObserver_DetectsChangesInObjectsWhoseMethodsAreCalled()\r\n        {\r\n            <span style=\"color:Blue\">var</span> multiplier = <span style=\"color:Blue\">new</span> Multiplier();\r\n            <span style=\"color:Blue\">var</span> valueProvider = ExpressionObserver.Execute(() =&gt; multiplier.Multiply(1));\r\n            \r\n            <span style=\"color:Blue\">var</span> eventRaised = <span style=\"color:Blue\">false</span>;\r\n            ((INotifyPropertyChanged)valueProvider).PropertyChanged += \r\n                (sender, e) =&gt; { eventRaised = <span style=\"color:Blue\">true</span>; };\r\n\r\n            multiplier.Factor++;\r\n\r\n            Assert.True(eventRaised);\r\n        }\r\n    }\r\n</pre>\r\n<pre>The assert at the bottom fails. Is there a way to tell the value provider that it needs to update when Multiplier.Factor changes?</pre>\r\n</div>",
    "PostedDate": "2009-11-27T00:28:46.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "261779",
    "ThreadId": "76378",
    "Html": "<p>Hi,</p>\r\n<p>Assuming that you don't want to change the signature of your Multiply method; this is what you can do:</p>\r\n<p>First you need to create a static method that implements the functionality of Multiply reactively and observably:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public class</span> X\r\n{\r\n    <span style=\"color:Blue\">static</span> Func&lt;Multiplier,<span style=\"color:Blue\">int</span>,IValueProvider&lt;<span style=\"color:Blue\">int</span>&gt;&gt; _Multiply =\r\n        ExpressionObserver.Compile(\r\n            (Multiplier m, <span style=\"color:Blue\">int</span> v) =&gt; m.Factor * v\r\n        );\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IValueProvider&lt;<span style=\"color:Blue\">int</span>&gt; Multiply( Multiplier m, <span style=\"color:Blue\">int</span> v )\r\n    { <span style=\"color:Blue\">return</span> _Multiply(m, v); }\r\n}</pre>\r\n</div>\r\n<p>Than you can either imperatively register this method with a particular ExpressionObserverObject like in the ObticsToXml project (ObservableExtensions.RegisterMappings method)</p>\r\n<p>or declaratively using the ExpressionObserverMappingAttribute as in the CustomMapping sample project (MyEnumerable class).</p>\r\n<p>Hope this helps.</p>\r\n<p>Regs</p>\r\n<p>Thomas.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-30T01:48:16.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]