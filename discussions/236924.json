[
  {
    "Id": "530295",
    "ThreadId": "236924",
    "Html": "\r\n<p><span>Hi Throb,<br>\r\n<br>\r\n</span><span>I use Obtics massively in a major project management planning that needs dynamic view.&nbsp;</span><span>Obtics is perfect for that.<br>\r\n</span><span>I need to fully optimize the creation of my objects.&nbsp;</span><span>I have two hotspots.<br>\r\n<br>\r\n</span><span>The first I'd like you to help resolve comes from the following class :</span>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> DynamicWorkDay : INotifyPropertyChanged, IValueProvider&lt;WorkDay&gt;\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;Employee, DateTime, IValueProvider&lt;WorkDay&gt;&gt; WorkDayProvider = ExpressionObserver.Compile((Employee e, DateTime date) =&gt; e.WorkDays == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : e.WorkDays.SingleOrDefault(wd =&gt; wd.Date == date));\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;IValueProvider&lt;DynamicTypicalDayAtDate&gt;, IValueProvider&lt;EntityCollection&lt;TimeSlot&gt;&gt;&gt; TypicalDayTimeSlotsProvider = ExpressionObserver.Compile((IValueProvider&lt;DynamicTypicalDayAtDate&gt; typicalDay) =&gt; typicalDay.Value == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : typicalDay.Value.Version.Value == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : typicalDay.Value.Version.Value.TimeSlots);\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;IValueProvider&lt;WorkDay&gt;, IValueProvider&lt;EntityCollection&lt;TimeSlot&gt;&gt;&gt; TimeSlotsProvider = ExpressionObserver.Compile((IValueProvider&lt;WorkDay&gt; wd) =&gt; wd.Value == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : wd.Value.TimeSlots);\r\n        \r\n        \r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;IValueProvider&lt;WorkDay&gt;, IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt;&gt; UseTypicalDayProvider = ExpressionObserver.Compile((IValueProvider&lt;WorkDay&gt; wd) =&gt; wd.Value != <span style=\"color:blue\">null</span> &amp;&amp; wd.Value.TypicalDay != <span style=\"color:blue\">null</span> &amp;&amp; wd.Value.TypicalWeek == <span style=\"color:blue\">null</span>);\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;IValueProvider&lt;WorkDay&gt;, IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt;&gt; UseTypicalWeekProvider = ExpressionObserver.Compile((IValueProvider&lt;WorkDay&gt; wd) =&gt; wd.Value != <span style=\"color:blue\">null</span> &amp;&amp; wd.Value.TypicalWeek != <span style=\"color:blue\">null</span>);\r\n        \r\n        \r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;IValueProvider&lt;WorkDay&gt;, IValueProvider&lt;DynamicTypicalDayAtDate&gt;&gt; TypicalDayProvider = ExpressionObserver.Compile((IValueProvider&lt;WorkDay&gt; wd) =&gt; wd.Value == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : wd.Value.TypicalDay == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : <span style=\"color:blue\">new</span> DynamicTypicalDayAtDate(wd.Value.TypicalDay, wd.Value.Date));\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> Func&lt;IValueProvider&lt;WorkDay&gt;, IValueProvider&lt;DynamicTypicalDayAtDate&gt;&gt; TypicalDayOfTypicalWeekProvider = ExpressionObserver.Compile((IValueProvider&lt;WorkDay&gt; wd) =&gt; wd.Value == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : wd.Value.TypicalWeek == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : <span style=\"color:blue\">new</span> DynamicTypicalWeekAtDate(wd.Value.TypicalWeek, wd.Value.Date).GetDynamicTypicalDay(wd.Value.Date).Value);\r\n\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IValueProvider&lt;WorkDay&gt; _workDay;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;String&gt; _color;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;EntityCollection&lt;TimeSlot&gt;&gt; _timeSlots;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;DynamicTypicalDayAtDate&gt; _typicalDay;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt; _useTypical;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt; _useTypicalDay;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt; _useTypicalWeek;\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;<span style=\"color:blue\">string</span>&gt; _content;\r\n\r\n        <span style=\"color:blue\">public</span> DynamicWorkDay(Employee employee, DateTime dateTime)\r\n        {\r\n            <span style=\"color:blue\">if</span> (employee == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentNullException(<span style=\"color:#a31515\">&quot;employee&quot;</span>);\r\n\r\n            <span style=\"color:blue\">this</span>.Employee = employee;\r\n            <span style=\"color:blue\">this</span>.DateTime = dateTime;\r\n\r\n            <span style=\"color:blue\">this</span>._workDay = WorkDayProvider(<span style=\"color:blue\">this</span>.Employee, <span style=\"color:blue\">this</span>.DateTime);\r\n    \r\n            Debug.Assert(_workDay != <span style=\"color:blue\">null</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;DynamicTypicalDayAtDate&gt; TypicalDay\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._typicalDay ?? (<span style=\"color:blue\">this</span>._typicalDay = <span style=\"color:blue\">this</span>.UseTypicalDay.IIf(TypicalDayProvider(<span style=\"color:blue\">this</span>._workDay), <span style=\"color:blue\">this</span>.UseTypicalWeek.IIf(TypicalDayOfTypicalWeekProvider(<span style=\"color:blue\">this</span>._workDay), ValueProvider.Static((DynamicTypicalDayAtDate) <span style=\"color:blue\">null</span>)))); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> Employee Employee { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> DateTime DateTime { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;String&gt; Color\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._color ?? (<span style=\"color:blue\">this</span>._color = <span style=\"color:blue\">this</span>.UseTypical.IIf(<span style=\"color:blue\">this</span>.TypicalDay.Select(td =&gt; td == <span style=\"color:blue\">null</span> ? ValueProvider.Static((String)<span style=\"color:blue\">null</span>) : td.Version.Select(tdv =&gt; tdv == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : tdv.Color)), (String)<span style=\"color:blue\">null</span>)); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;String&gt; Content\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._content ?? (<span style=\"color:blue\">this</span>._content = <span style=\"color:blue\">this</span>.UseTypical.IIf(<span style=\"color:blue\">this</span>.TypicalDay.Select(td =&gt; td == <span style=\"color:blue\">null</span> ? ValueProvider.Static((String)<span style=\"color:blue\">null</span>) : td.Version.Select(tdv =&gt; tdv == <span style=\"color:blue\">null</span> ? <span style=\"color:#a31515\">&quot;Chargement...&quot;</span> : tdv.Name)), (String)<span style=\"color:blue\">null</span>)); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt; UseTypical\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._useTypical ?? (<span style=\"color:blue\">this</span>._useTypical = <span style=\"color:blue\">this</span>.UseTypicalDay.Or(<span style=\"color:blue\">this</span>.UseTypicalWeek)); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt; UseTypicalDay\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._useTypicalDay ?? (<span style=\"color:blue\">this</span>._useTypicalDay = UseTypicalDayProvider(<span style=\"color:blue\">this</span>._workDay));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;<span style=\"color:blue\">bool</span>&gt; UseTypicalWeek\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._useTypicalWeek ?? (<span style=\"color:blue\">this</span>._useTypicalWeek = UseTypicalWeekProvider(<span style=\"color:blue\">this</span>._workDay));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> IValueProvider&lt;EntityCollection&lt;TimeSlot&gt;&gt; TimeSlots\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._timeSlots ?? (<span style=\"color:blue\">this</span>._timeSlots = <span style=\"color:blue\">this</span>.UseTypical.IIf(TypicalDayTimeSlotsProvider(<span style=\"color:blue\">this</span>._typicalDay), TimeSlotsProvider(<span style=\"color:blue\">this</span>._workDay))); }\r\n        }\r\n\r\n        <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n        <span style=\"color:blue\">private</span> PropertyChangedEventHandler _propertyChanged;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> register;\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnWorkDayPropertyChanged(<span style=\"color:blue\">object</span> sender, PropertyChangedEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span>(e.PropertyName == <span style=\"color:#a31515\">&quot;Value&quot;</span>)\r\n                <span style=\"color:blue\">this</span>.RaisePropertyChanged(<span style=\"color:#a31515\">&quot;Value&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged\r\n        {\r\n            add\r\n            {\r\n                <span style=\"color:blue\">if</span>(register == <span style=\"color:blue\">false</span>)\r\n                    ((INotifyPropertyChanged)<span style=\"color:blue\">this</span>._workDay).PropertyChanged &#43;= OnWorkDayPropertyChanged;\r\n\r\n\r\n                <span style=\"color:blue\">this</span>._propertyChanged &#43;= value;\r\n            }\r\n            remove { <span style=\"color:blue\">this</span>._propertyChanged -= value; }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> IValueProvider&lt;WorkDay&gt; Members\r\n\r\n        <span style=\"color:blue\">public</span> WorkDay Value\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._workDay.Value; }\r\n            <span style=\"color:blue\">set</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n        }\r\n\r\n        <span style=\"color:blue\">object</span> IValueProvider.Value\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.Value; }\r\n            <span style=\"color:blue\">set</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsReadOnly\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>; }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RaisePropertyChanged(<span style=\"color:blue\">string</span> propertyName)\r\n        {\r\n            PropertyChangedEventHandler handler = <span style=\"color:blue\">this</span>._propertyChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>) handler(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n        }\r\n    }</pre>\r\n</div>\r\n<p><span>On the getter of the Color property, there is a big waste of time. <br>\r\nCan</span><span>&nbsp;I optimize the IIf operation ?</span></p>\r\n<p><span><br>\r\n</span></p>\r\n<p>The second point is that when the binding between the View and my ViewModel, there is a loss of time on</p>\r\n<p><span>&nbsp;</span><span><strong>Obtics.NCSourcedObjectToVP `2.add_PropertyChanged (PropertyChangedEventHandler)</strong><br>\r\n<br>\r\n</span><span>Is it possible to do something ?</span></p>\r\n<p>Thank you very much in advance.<br>\r\nRegs,<br>\r\nVincent BOUZON</p>\r\n",
    "PostedDate": "2010-12-02T13:01:46.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "530301",
    "ThreadId": "236924",
    "Html": "\r\n<p><span>For information, the DynamicWorkDay class is widely used and very often instantiated.<br>\r\n</span><span>It would be nice if instantiation of 140 DynamicWorkDay&nbsp;(2 weeks for 10 persons) take less than half a second.</span></p>\r\n<p><span>Vincent</span></p>\r\n",
    "PostedDate": "2010-12-02T13:07:04.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "531871",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>There are a few things that might help:</p>\r\n<p>You create a few object types (DynamicTypicalDayAtDate, DynamicTypicalWeekAtDate&nbsp;and probably also DynamicWorkDay) on the fly in observable expressions. The consequence might be that many of these object instance will be created. In such a case I always\r\n use the Carrousel pattern. Every of these objects has (I guess) an identifying key. These are probably the parameters you create them with. So, for every unique set of parameters you would like to instantiate one and one only of you object types. You will\r\n need a public static X.Create(p1,p2..px) function that for every unique combination of p1,p2..px returns one and one the same object instance. You would use this function instead of 'new X(p1, p2, .. px)'</p>\r\n<p>WorkDay is probably the identifying key for DynamicWorkDay yet you do not instantiate it with WorkdDay as parameter?</p>\r\n<p>I always make all my observable properties lazy and don't use fields to store pipeline instances. Your WorkDay property is not lazy.&nbsp;I don't feel I get a significant improvement when storing pipelines in fields&nbsp;and it clutters the code a bit.</p>\r\n<p>Sometimes when binding IValueProviders from the UI I find that the UI can access the Value property many times. Obtics by default does not buffer values, meaning that a result would be calculated many times over. You could use the ValueProvider.Buffer()&nbsp;extension\r\n method to explicitly buffer the result.&nbsp;In that case&nbsp;'UseTypicalWeekProvider(<span style=\"color:blue\">this</span>._workDay)' would be extended to 'UseTypicalWeekProvider(<span style=\"color:blue\">this</span>._workDay).Buffer()'.</p>\r\n<p>IIf can sometimes be optimized by letting it return a pipeline generating function instead of the pipeline itself (only when you expect the first parameter not to change value too often). Like so:</p>\r\n<p><span style=\"color:blue\">this</span>._typicalDay = <span style=\"color:blue\">this</span>.UseTypicalDay.IIf(TypicalDayProvider,\r\n<span style=\"color:blue\">this</span>.UseTypicalWeek.IIf(TypicalDayOfTypicalWeekProvider,\r\n<span style=\"color:blue\">new </span>Func&lt;IValueProvider&lt;WorkDay&gt;, IValueProvider&lt;DynamicTypicalDayAtDate&gt;&gt;(&nbsp;d =&gt;&nbsp;ValueProvider.Static((DynamicTypicalDayAtDate)\r\n<span style=\"color:blue\">null</span>)))).Select( f =&gt; f(<span style=\"color:blue\">this</span>._workDay))&nbsp;</p>\r\n<p>Below you can find some carrousel code. You could use it like:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> DynamicTypicalDayAtDate\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static readonly</span> Func&lt;TypicalDay,DateTime,DynamicTypicalDayAtDate&gt; Create =\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Carrousel.Create(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (TypicalDay day, DateTime date) =&gt; <span style=\"color:blue\">new</span> DynamicTypicalDayAtDate( day, date ),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dtd =&gt; dtd.Day,</pre>\r\n<pre>            dtd =&gt; dtd.Date<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp; ;<br>}</pre>\r\n<pre>Note that once the Day and Date Properties are set they should never change.</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> TvdP.Collections;\r\n\r\n<span style=\"color:blue\">namespace</span> NameSpace\r\n{\r\n    <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> Carrousel\r\n    {\r\n        <span style=\"color:blue\">sealed</span> <span style=\"color:blue\">class</span> InternalCarrousel&lt;TKey, TObject&gt; : ConcurrentWeakHashtable&lt;KeyValuePair&lt;UInt32, WeakReference&gt;, KeyValuePair&lt;UInt32, TKey&gt;&gt;\r\n            <span style=\"color:blue\">where</span> TObject : <span style=\"color:blue\">class</span>\r\n        {\r\n            <span style=\"color:blue\">public</span> InternalCarrousel(IEqualityComparer&lt;TKey&gt; keyComparer, Func&lt;TObject, TKey&gt; keyExtractor, Func&lt;TKey, TObject&gt; factory)\r\n            {\r\n                Initialize();\r\n\r\n                _KeyComparer = keyComparer;\r\n                _KeyExtractor = keyExtractor;\r\n                _Factory = factory;\r\n            }\r\n\r\n            IEqualityComparer&lt;TKey&gt; _KeyComparer;\r\n            Func&lt;TObject, TKey&gt; _KeyExtractor;\r\n            Func&lt;TKey, TObject&gt; _Factory;\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> IsGarbage(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item)\r\n            {\r\n                <span style=\"color:blue\">var</span> wr = item.Value;\r\n                <span style=\"color:blue\">return</span> wr != <span style=\"color:blue\">null</span> &amp;&amp; wr.Target == <span style=\"color:blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> ItemEqualsItem(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item1, <span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item2)\r\n            {\r\n                <span style=\"color:blue\">var</span> item1_Second = item1.Value;\r\n                <span style=\"color:blue\">var</span> item2_Second = item2.Value;\r\n\r\n                <span style=\"color:blue\">var</span> tgt1 = item1_Second.Target;\r\n                <span style=\"color:blue\">return</span> tgt1 != <span style=\"color:blue\">null</span> ? tgt1.Equals(item2_Second.Target) : <span style=\"color:blue\">object</span>.ReferenceEquals(item1_Second, item2_Second);\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> ItemEqualsKey(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item, <span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, TKey&gt; key)\r\n            {\r\n                <span style=\"color:blue\">var</span> tgt = (TObject)item.Value.Target;\r\n                <span style=\"color:blue\">return</span> tgt != <span style=\"color:blue\">null</span> &amp;&amp; _KeyComparer.Equals( _KeyExtractor(tgt), key.Value );\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">uint</span> GetKeyHashCode(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, TKey&gt; key)\r\n            { <span style=\"color:blue\">return</span> key.Key; }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">uint</span> GetItemHashCode(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item)\r\n            { <span style=\"color:blue\">return</span> item.Key; }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> IsEmpty(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item)\r\n            { <span style=\"color:blue\">return</span> item.Value == <span style=\"color:blue\">null</span>; }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> Type GetKeyType(<span style=\"color:blue\">ref</span> KeyValuePair&lt;<span style=\"color:blue\">uint</span>, WeakReference&gt; item)\r\n            {\r\n                <span style=\"color:blue\">if</span> (item.Value == <span style=\"color:blue\">null</span>)\r\n                    <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n\r\n                <span style=\"color:blue\">var</span> obj = item.Value.Target;\r\n\r\n                <span style=\"color:blue\">return</span> obj == <span style=\"color:blue\">null</span> ? <span style=\"color:blue\">null</span> : obj.GetType();\r\n            }\r\n\r\n            <span style=\"color:blue\">uint</span> Rehash(<span style=\"color:blue\">int</span> v)\r\n            {\r\n                <span style=\"color:blue\">unchecked</span>\r\n                {\r\n                    <span style=\"color:blue\">ulong</span> m = (<span style=\"color:blue\">ulong</span>)v * 0x00000000e85791a6UL;\r\n                    <span style=\"color:blue\">return</span> (<span style=\"color:blue\">uint</span>)(m ^ (m &gt;&gt; 32) ^ 0x00000000827a092bUL);\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> TObject Get(TKey key)\r\n            {\r\n                <span style=\"color:blue\">var</span> searchKey =\r\n                    <span style=\"color:blue\">new</span> KeyValuePair&lt;UInt32, TKey&gt;(\r\n                        Rehash(_KeyComparer.GetHashCode(key)),\r\n                        key\r\n                    );\r\n\r\n                KeyValuePair&lt;UInt32, WeakReference&gt; oldStoredItem;\r\n\r\n                TObject res = <span style=\"color:blue\">null</span>;\r\n\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">base</span>.FindItem(<span style=\"color:blue\">ref</span> searchKey, <span style=\"color:blue\">out</span> oldStoredItem))\r\n                    res = (TObject)oldStoredItem.Value.Target;\r\n\r\n                <span style=\"color:blue\">if</span> (res == <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:blue\">var</span> newItem = _Factory(key);\r\n\r\n                    <span style=\"color:blue\">if</span> (newItem != <span style=\"color:blue\">null</span>)\r\n                    {\r\n                        <span style=\"color:blue\">var</span> newStoredItem = <span style=\"color:blue\">new</span> KeyValuePair&lt;UInt32, WeakReference&gt;(searchKey.Key, <span style=\"color:blue\">new</span> WeakReference(newItem));\r\n\r\n                        <span style=\"color:blue\">do</span>\r\n                        {\r\n                            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">base</span>.GetOldestItem(<span style=\"color:blue\">ref</span> newStoredItem, <span style=\"color:blue\">out</span> oldStoredItem))\r\n                                res = (TObject)oldStoredItem.Value.Target;\r\n                            <span style=\"color:blue\">else</span>\r\n                                res = newItem;\r\n                        }\r\n                        <span style=\"color:blue\">while</span> (res == <span style=\"color:blue\">null</span>);\r\n                    }\r\n                }\r\n\r\n                <span style=\"color:blue\">return</span> res;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;TKey, TObject&gt; Create&lt;TKey, TObject&gt;(Func&lt;TKey, TObject&gt; factory, Func&lt;TObject, TKey&gt; keyExtractor, IEqualityComparer&lt;TKey&gt; keyComparer)\r\n            <span style=\"color:blue\">where</span> TObject : <span style=\"color:blue\">class</span>\r\n        { <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> InternalCarrousel&lt;TKey, TObject&gt;(keyComparer, keyExtractor, factory).Get; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;TKey, TObject&gt; Create&lt;TKey, TObject&gt;(Func&lt;TKey, TObject&gt; factory, Func&lt;TObject, TKey&gt; keyExtractor)\r\n            <span style=\"color:blue\">where</span> TObject : <span style=\"color:blue\">class</span>\r\n        { <span style=\"color:blue\">return</span> Create(factory, keyExtractor, EqualityComparer&lt;TKey&gt;.Default); }</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><div style=\"color:black; background-color:white\"><pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;TK1, TK2, TObject&gt; Create&lt;TK1, TK2, TObject&gt;(Func&lt;TK1, TK2, TObject&gt; factory, Func&lt;TObject, TK1&gt; key1Extractor, Func&lt;TObject, TK2&gt; key2Extractor)\r\n            <span style=\"color:blue\">where</span> TObject : <span style=\"color:blue\">class</span>\r\n        {\r\n            <span style=\"color:blue\">var</span> itm =\r\n                Create&lt;Tuple&lt;TK1, TK2&gt;, TObject&gt;(\r\n                    t =&gt; factory(t.Item1, t.Item2),\r\n                    o =&gt; Tuple.Create(key1Extractor(o), key2Extractor(o))\r\n                )\r\n            ;\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Func&lt;TK1, TK2, TObject&gt;( (k1, k2) =&gt; itm( Tuple.Create(k1, k2) ) );\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n} }</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-06T10:35:45.277-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "531970",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Throb,</p>\r\n<p><span>Thank you for your answer. Indeed, for the Carousel I started to implement as well, but I'll reuse yours as it is rather easy to use :)</span></p>\r\n<p><span>At the Get, if there are two&nbsp;</span><span>threads that together create the same object how it goes there in your implementation ?<br>\r\n</span><span>In fact, why call this pattern &quot;Carousel&quot; ?&nbsp;</span><span>:)</span></p>\r\n<p><span>Here's my version :) must inherit and implement the different methods.</span></p>\r\n<p><span>&nbsp;</span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> RepositoryBase&lt;TBase, TArgs&gt; : IEqualityComparer&lt;TArgs&gt;\r\n    {\r\n        <span style=\"color:blue\">protected</span> Dictionary&lt;TArgs, TBase&gt; Created;\r\n        <span style=\"color:blue\">protected</span> List&lt;TArgs&gt; Creating;\r\n\r\n        <span style=\"color:blue\">protected</span> RepositoryBase()\r\n        {\r\n            <span style=\"color:blue\">this</span>.Creating = <span style=\"color:blue\">new</span> List&lt;TArgs&gt;();\r\n            <span style=\"color:blue\">this</span>.Created = <span style=\"color:blue\">new</span> Dictionary&lt;TArgs, TBase&gt;(<span style=\"color:blue\">this</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">virtual</span> TBase GetOrCreate(TArgs args)\r\n        {\r\n            Monitor.Enter(<span style=\"color:blue\">this</span>.Creating);\r\n            Monitor.Enter(<span style=\"color:blue\">this</span>.Created);\r\n            TBase baseObject;\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.Created.TryGetValue(args, <span style=\"color:blue\">out</span> baseObject))\r\n            {\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Creating);\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Created);\r\n\r\n                <span style=\"color:blue\">return</span> baseObject;\r\n            }\r\n\r\n            TArgs tmpArgs = <span style=\"color:blue\">this</span>.Creating.FirstOrDefault(c =&gt; <span style=\"color:blue\">this</span>.Equals(c, args));\r\n            <span style=\"color:blue\">if</span> (tmpArgs != <span style=\"color:blue\">null</span>)\r\n            {\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Creating);\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Created);\r\n                Monitor.Enter(tmpArgs);\r\n\r\n                baseObject = <span style=\"color:blue\">this</span>.Created[tmpArgs];\r\n\r\n                Monitor.Exit(tmpArgs);\r\n\r\n                <span style=\"color:blue\">return</span> baseObject;\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                <span style=\"color:blue\">this</span>.Creating.Add(args);\r\n\r\n                Monitor.Enter(args);\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Creating);\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Created);\r\n\r\n                baseObject = <span style=\"color:blue\">this</span>.Create(args);\r\n\r\n                Monitor.Enter(<span style=\"color:blue\">this</span>.Creating);\r\n                Monitor.Enter(<span style=\"color:blue\">this</span>.Created);\r\n\r\n                <span style=\"color:blue\">this</span>.Creating.Remove(args);\r\n                <span style=\"color:blue\">this</span>.Created.Add(args, baseObject);\r\n\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Creating);\r\n                Monitor.Exit(<span style=\"color:blue\">this</span>.Created);\r\n\r\n                Monitor.Exit(args);\r\n\r\n                <span style=\"color:blue\">return</span> baseObject;\r\n            }\r\n        }\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">abstract</span> TBase Create(TArgs args);\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">abstract</span> IEnumerable&lt;TArgs&gt; GetCreators();\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">bool</span> Equals(TArgs x, TArgs y);\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">int</span> GetHashCode(TArgs obj);\r\n    }\r\n</pre>\r\n</div>\r\n<p><br>\r\n<span>Otherwise thank you for the optimization of IIf, I'll do that.<br>\r\n</span><span>By cons, in my version, I have not the extension method &quot;Buffer&quot;.&nbsp;</span><span>I already try to find a way because I realized the recalculation.</span></p>\r\n<p>&nbsp;</p>\r\n<p><span>Otherwise what time zone are you?</span></p>\r\n<p><span>Thank you again.</span></p>\r\n<p>Best regards,<br>\r\nVincent BOUZON&nbsp;</p>\r\n",
    "PostedDate": "2010-12-06T13:31:28.963-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "533623",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>You are right, the name of the method is not &quot;Buffer&quot; but &quot;Cached&quot;. Sorry for the confusion.</p>\r\n<p>With the Carrousel implementation&nbsp;it is possible but unlikely&nbsp;for&nbsp;multiple threads to create a new instance simultanously. When that happens only one instance will actually be used. The other(s) will be released immediately. The advantage\r\n is that the carrousel is completely concurrent. Naturally your constructors need to be threadsafe too in case you use multiple threads.&nbsp;</p>\r\n<p>Why the pattern is called carrousel I don't know. I found&nbsp;it in a book once (with regard to strings). The writer must not have been very famous because I can't find&nbsp;anything about it&nbsp;on the internet.</p>\r\n<p>Regs,</p>\r\n<p>Thomas<span style=\"font-family:Consolas; font-size:x-small\"></span></p>\r\n",
    "PostedDate": "2010-12-09T13:26:48.003-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "537303",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Throb,</p>\r\n<p>I have not the extension method &quot;Cached&quot; too :( Have you an idea&nbsp;when a new stable version will be available?</p>\r\n<p>Regs,<br>\r\nVincent&nbsp;</p>\r\n",
    "PostedDate": "2010-12-17T06:52:50.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "539269",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>&quot;Async( )&quot; then? The old version used to cache the result.</p>\r\n<p>Btw. Did you manage to get any performance improvements?</p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>\r\n",
    "PostedDate": "2010-12-22T03:32:45.727-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "540817",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Thomas,</p>\r\n<p>Yes i use&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">but</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">I</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">thought</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">it</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">only\r\n allowed</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">to</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">change</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">the thread</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">of</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">events.&nbsp;</span></p>\r\n<p><span title=\"Cliquer ici pour voir d'autres traductions\">About</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">performance</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">I</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">managed</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">to</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">get</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">better</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">performance</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">but</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">not</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">enough.&nbsp;</span><span title=\"Cliquer ici pour voir d'autres traductions\">I\r\n still have</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">performance issues</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">at</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">the</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">Binding</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">between\r\n the</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">view</span>&nbsp;<span title=\"Cliquer ici pour voir d'autres traductions\">and the model :(&nbsp;</span></p>\r\n<p><span title=\"Cliquer ici pour voir d'autres traductions\"></p>\r\n<pre>28,46 %   add_PropertyChanged  -  1?788 ms  -  156 calls  -  Obtics.NCSourcedObjectToVP`2.add_PropertyChanged(PropertyChangedEventHandler)\r\n  28,35 %   add_PropertyChanged  -  1?781 ms  -  156 calls  -  Obtics.NCToNPC.add_PropertyChanged(PropertyChangedEventHandler)\r\n    28,35 %   set_HavePropertyChangedListeningClients  -  1?781 ms  -  156 calls  -  Obtics.NCToNPC.set_HavePropertyChangedListeningClients(Boolean)\r\n      28,34 %   SubscribeINC  -  1?781 ms  -  156 calls  -  Obtics.NCObservableObjectBase`1.SubscribeINC(IReceiveChangeNotification)\r\n        28,34 %   set_HaveChangedListeningClients  -  1?781 ms  -  156 calls  -  Obtics.NCObservableObjectBase`1.set_HaveChangedListeningClients(Boolean)\r\n          28,34 %   UpdateHaveChangedListeningClients  -  1?781 ms  -  156 calls  -  Obtics.NCSourcedObject`1.UpdateHaveChangedListeningClients(Boolean, Boolean)\r\n            28,34 %   set_NeedSourceChangedListener  -  1?780 ms  -  156 calls  -  Obtics.NCSourcedObject`1.set_NeedSourceChangedListener(Boolean)\r\n              28,34 %   UpdateNeedSourceChangedListener  -  1?780 ms  -  156 calls  -  Obtics.NCSourcedObject`1.UpdateNeedSourceChangedListener(Boolean, Boolean)\r\n                28,33 %   SubscribeINC  -  1?780 ms  -  156 calls  -  Obtics.NCObservableObjectBase`1.SubscribeINC(IReceiveChangeNotification)\r\n                  28,29 %   set_HaveChangedListeningClients  -  1?777 ms  -  156 calls  -  Obtics.NCObservableObjectBase`1.set_HaveChangedListeningClients(Boolean)\r\n                    28,29 %   UpdateHaveChangedListeningClients  -  1?777 ms  -  156 calls  -  Obtics.NCSourcedObject`1.UpdateHaveChangedListeningClients(Boolean, Boolean)\r\n                      28,29 %   set_NeedSourceChangedListener  -  1?777 ms  -  156 calls  -  Obtics.NCSourcedObject`1.set_NeedSourceChangedListener(Boolean)\r\n                        28,29 %   UpdateNeedSourceChangedListener  -  1?777 ms  -  156 calls  -  Obtics.NCSourcedObject`1.UpdateNeedSourceChangedListener(Boolean, Boolean)\r\n                          28,29 %   SubscribeINC  -  1?777 ms  -  156 calls  -  Obtics.NCObservableObjectBase`1.SubscribeINC(IReceiveChangeNotification)\r\n                            28,28 %   set_HaveChangedListeningClients  -  1?777 ms  -  156 calls  -  Obtics.NCObservableObjectBase`1.set_HaveChangedListeningClients(Boolean)\r\n                              22,90 %   UpdateHaveChangedListeningClients  -  1?438 ms  -  84 calls  -  Obtics.Values.Transformations.CascadingTransformationBase`5.UpdateHaveChangedListeningClients(Boolean, Boolean)\r\n                                22,88 %   RefreshBufferCache  -  1?438 ms  -  84 calls  -  Obtics.Values.Transformations.CascadingTransformationBase`5.RefreshBufferCache\r\n                                  22,37 %   set_Buffer  -  1?405 ms  -  84 calls  -  Obtics.Values.Transformations.CascadingTransformationBase`5.set_Buffer(TItm)\r\n                                    22,37 %   UpdateBuffer  -  1?405 ms  -  84 calls  -  Obtics.Values.Transformations.CascadeTransformation`2.UpdateBuffer(IValueProvider[TType], IValueProvider[TType])\r\n                                      22,37 %   SubscribeINC  -  1?405 ms  -  16?380 calls  -  Obtics.NCObservableObjectBase`1.SubscribeINC(IReceiveChangeNotification)\r\n                                        21,49 %   set_HaveChangedListeningClients  -  1?350 ms  -  16?380 calls  -  Obtics.NCObservableObjectBase`1.set_HaveChangedListeningClients(Boolean)\r\n                                          16,28 %   UpdateHaveChangedListeningClients  -  1?023 ms  -  3?528 calls  -  Obtics.Values.Transformations.CascadingTransformationBase`5.UpdateHaveChangedListeningClients(Boolean, Boolean)\r\n                                            16,20 %   RefreshBufferCache  -  1?018 ms  -  3?528 calls  -  Obtics.Values.Transformations.CascadingTransformationBase`5.RefreshBufferCache\r\n                                              16,06 %   ItmFromSource  -  1?009 ms  -  3?192 calls  -  Obtics.Values.Transformations.CascadeTransformation`2.ItmFromSource\r\n                                                16,04 %   get_Value  -  1?008 ms  -  19?488 calls  -  Obtics.NCSourcedObjectToVP`2.get_Value\r\n                                                  9,50 %   ProtectedGetValue  -  597 ms  -  1?848 calls  -  Obtics.Values.Transformations.PropertyTransformation`2.ProtectedGetValue\r\n                                                    9,49 %   GetValue  -  597 ms  -  504 calls  -  Obtics.Values.Transformations.PropertyTransformation&#43;PropertyClass`2.GetValue(TIn)\r\n                                                      9,49 %   get_RealWorkTimeSlots  -  596 ms  -  168 calls  -  Arcan.Planning.ViewModels.DynamicWorkDay.get_RealWorkTimeSlots\r\n                                                        7,72 %   get_WorkTimeSlots  -  485 ms  -  168 calls  -  Arcan.Planning.ViewModels.DynamicWorkDay.get_WorkTimeSlots\r\n                                                          4,87 %   get_TypicalDay  -  306 ms  -  168 calls  -  Arcan.Planning.ViewModels.DynamicWorkDay.get_TypicalDay\r\n                                                            2,69 %   get_UseTypicalDay  -  169 ms  -  168 calls  -  Arcan.Planning.ViewModels.DynamicWorkDay.get_UseTypicalDay\r\n                                                              ?2,65 %   Create  -  166 ms  -  168 calls  -  Obtics.Values.Transformations.PipelineResultTransformation`3.Create(TKey)\r\n                                                               0,05 %   CreateDelegate  -  3 ms  -  168 calls  -  System.Reflection.Emit.DynamicMethod.CreateDelegate(Type, Object)\r\n                                                            1,01 %   get_UseTypicalWeek  -  63 ms  -  168 calls  -  Arcan.Planning.ViewModels.DynamicWorkDay.get_UseTypicalWeek\r\n                                                              ?0,96 %   Create  -  60 ms  -  168 calls  -  Obtics.Values.Transformations.PipelineResultTransformation`3.Create(TKey)\r\n                                                               0,05 %   CreateDelegate  -  3 ms  -  168 calls  -  System.Reflection.Emit.DynamicMethod.CreateDelegate(Type, Object)\r\n                                                            ?0,55 %   IIf  -  34 ms  -  168 calls  -  Obtics.Values.ValueProvider.IIf(IValueProvider[Boolean], TType, IValueProvider[TType])\r\n                                                            ?0,35 %   IIf  -  22 ms  -  168 calls  -  Obtics.Values.ValueProvider.IIf(IValueProvider[Boolean], TType, TType)\r\n                                                            ?0,18 %   Create  -  11 ms  -  168 calls  -  Obtics.Values.Transformations.UnarySelectTransformation`2.Create(IValueProvider[TIn], Func[TInTOut])\r\n                                                            ?0,10 %   GeneralCreate  -  6 ms  -  168 calls  -  Obtics.Values.Transformations.CascadeTransformation`2.GeneralCreate(IValueProvider[TItm])\r\n                                                          ?2,77 %   Create  -  174 ms  -  168 calls  -  Obtics.Values.Transformations.PipelineResultTransformation`3.Create(TKey)\r\n                                                           0,07 %   CreateDelegate  -  5 ms  -  168 calls  -  System.Reflection.Emit.DynamicMethod.CreateDelegate(Type, Object)\r\n                                                        ?1,68 %   Create  -  106 ms  -  168 calls  -  Obtics.Values.Transformations.PipelineResultTransformation`3.Create(TKey)\r\n                                                  ?6,23 %   ProtectedGetValue  -  392 ms  -  3?192 calls  -  Obtics.Values.Transformations.UnarySelectTransformation`2.ProtectedGetValue\r\n                                          ?4,87 %   UpdateHaveChangedListeningClients  -  306 ms  -  1?260 calls  -  Obtics.Collections.Transformations.UnorderedNotifyVpcTransformation`2.UpdateHaveChangedListeningClients(Boolean, Boolean)\r\n                              ?5,39 %   UpdateHaveChangedListeningClients  -  338 ms  -  72 calls  -  Obtics.NCSourcedObject`1.UpdateHaveChangedListeningClients(Boolean, Boolean)\r\nRegs,<br>Vincent</pre>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p></p>\r\n",
    "PostedDate": "2010-12-27T06:38:34.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546033",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>Wish I had a better overview of your project to spot the bottleneck. Your DynamicWorkDay class doesn't seem overly complex. Did you check that no more than necessairy DynamicWorkDay's and Weeks are being created?</p>\r\n<p>How many workday are there in your e.WorkDays collection? It might be worth trying to use e.WorkDays.ToDictionary(wd =&gt; wd.Date)[date]</p>\r\n<p>Hope you can solve your problems.</p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-08T12:41:14.43-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "552409",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>Here is a piece of code that may be interesting. It defines 2 'Compile' variations (CompileDelayedObservable). The resulting Observable expressions first calculate the result value using the expression as provided. Only later the whole&nbsp;transformation\r\n pipeline&nbsp;will be built.</p>\r\n<p>This may be very usefull when building UI's and I'm getting some positive results. The UI can be drawn quickly and later reactivity is added. Because a small pipeline is still being built&nbsp;it works best with largish expressions.&nbsp;If this idea works\r\n I could incorporate it into the core and that would make it even more effective.</p>\r\n<p>Regs,</p>\r\n<p>Thomas</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> ExpressionObserverExtensions\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1,IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1,T&gt;(Expression&lt;Func&lt;P1,T&gt;&gt; exp, Obtics.Async.IWorkQueue workQueue)\r\n        {\r\n            <span style=\"color:blue\">var</span> directFunc = exp.Compile();\r\n            <span style=\"color:blue\">var</span> observableFunc = ExpressionObserver.Compile(exp);\r\n            <span style=\"color:blue\">var</span> carrousel = \r\n                Carrousel.Create(\r\n                    (P1 p1) =&gt;\r\n                    {\r\n                        <span style=\"color:blue\">var</span> s = ValueProvider.Dynamic( <span style=\"color:blue\">new</span> { p1, vp = ValueProvider.Static( directFunc(p1) ) } );\r\n\r\n                        workQueue.QueueWorkItem(\r\n                            obj =&gt; s.Value = <span style=\"color:blue\">new</span> { p1, vp = observableFunc(p1) },\r\n                            <span style=\"color:blue\">null</span>\r\n                        );\r\n\r\n                        <span style=\"color:blue\">return</span> s;\r\n                    },\r\n                    o =&gt; o.Value.p1\r\n                )\r\n            ;\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Func&lt;P1,IValueProvider&lt;T&gt;&gt;( p1 =&gt; carrousel(p1).Select(o =&gt; o.vp) );\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, T&gt;(Expression&lt;Func&lt;P1, T&gt;&gt; exp)\r\n        { <span style=\"color:blue\">return</span> CompileDelayedObservable( exp, Obtics.Async.WorkQueue.DefaultWorkQueueProvider.GetWorkQueue()); }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, P2, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, P2, T&gt;(Expression&lt;Func&lt;P1, P2, T&gt;&gt; exp, Obtics.Async.IWorkQueue workQueue)\r\n        {\r\n            <span style=\"color:blue\">var</span> directFunc = exp.Compile();\r\n            <span style=\"color:blue\">var</span> observableFunc = ExpressionObserver.Compile(exp);\r\n            <span style=\"color:blue\">var</span> carrousel =\r\n                Carrousel.Create(\r\n                    (P1 p1, P2 p2) =&gt;\r\n                    {\r\n                        <span style=\"color:blue\">var</span> s = ValueProvider.Dynamic(<span style=\"color:blue\">new</span> { p1, p2, vp = ValueProvider.Static(directFunc(p1, p2)) });\r\n\r\n                        workQueue.QueueWorkItem(\r\n                            obj =&gt; s.Value = <span style=\"color:blue\">new</span> { p1, p2, vp = observableFunc(p1, p2) },\r\n                            <span style=\"color:blue\">null</span>\r\n                        );\r\n\r\n                        <span style=\"color:blue\">return</span> s;\r\n                    },\r\n                    o =&gt; o.Value.p1,\r\n                    o =&gt; o.Value.p2\r\n                )\r\n            ;\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Func&lt;P1, P2, IValueProvider&lt;T&gt;&gt;( (p1, p2) =&gt; carrousel(p1, p2).Select(o =&gt; o.vp));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, P2, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, P2, T&gt;(Expression&lt;Func&lt;P1, P2, T&gt;&gt; exp)\r\n        { <span style=\"color:blue\">return</span> CompileDelayedObservable(exp, Obtics.Async.WorkQueue.DefaultWorkQueueProvider.GetWorkQueue()); }\r\n\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div id=\"x__mcePaste\" style=\"width:1px; height:1px; overflow:hidden; top:0px; left:-10000px\">\r\n&#65279;</div>\r\n",
    "PostedDate": "2011-01-20T00:59:13.077-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553575",
    "ThreadId": "236924",
    "Html": "\r\n<div id=\"x_tts_button\">\r\n<p>Hello Throb,</p>\r\n<p>Thank you for your answers, I was very busy. Regarding my code, I create the least possible DynamicWorkDay (Data Virtualization &amp; IU in my grid). In e.WorkDays, there are not many Workday.</p>\r\n<p>Thank you for these extensions, I try to reproduce this behavior but I gave up. When I use it I get:</p>\r\n<p>System.MethodAccessException was unhandled by user code<br>\r\n&nbsp; Message=&Eacute;chec de la tentative d'acc&egrave;s de la m&eacute;thode 'Obtics.Carrousel.ConstructObservableObject&lt;System.__Canon,Obtics.Tuple`2&lt;System.__Canon,System.__Canon&gt;&gt;(Int32, Obtics.Tuple`2&lt;System.__Canon,System.__Canon&gt;)'\r\n &agrave; la m&eacute;thode 'Obtics.Values.Transformations.UnarySelectTransformation`2&lt;System.__Canon,System.__Canon&gt;..ctor()'.<br>\r\n&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean&amp; canBeCached, RuntimeMethodHandleInternal&amp; ctor, Boolean&amp; bNeedSecurityCheck)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; System.Activator.CreateInstance[T]()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Obtics.Carrousel.ConstructObservableObject[TOut,TPrms](Int32 hash, TPrms prms)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Obtics.Carrousel.InternalCarrousel`2.Get(TKey key, Func`3 creator)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Obtics.Carrousel.Get[TOut,TKey1,TKey2](TKey1 key1, TKey2 key2)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Obtics.Values.Transformations.UnarySelectTransformation`2.Create(IValueProvider`1 source, Func`2 converter)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Obtics.Values.ValueProvider.Select[TSource,TResult](IValueProvider`1 source, Func`2 valueConverter)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Obtics.Values.ValueProvider.Select[TSource,TResult](IValueProvider`1 source, Func`2 valueConverter)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Xxxx.Planning.Infrastructure.ExpressionObserverExtensions.&lt;&gt;c__DisplayClass10`3.&lt;CompileDelayedObservable&gt;b__e(P1 p1, P2 p2)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Xxxx.Planning.ViewModels.DynamicWorkDay..ctor(Employee employee, DateTime dateTime)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &agrave; Xxxx.Planning.ViewModels.DynamicWorkDay.&lt;.cctor&gt;b__e(Employee employee, DateTime date)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;....&nbsp;</p>\r\n<p><br>\r\nI use the version of&nbsp;Obtics for Silverlight 4.0&nbsp;found here: <a href=\"http://obtics.codeplex.com/Thread/View.aspx?ThreadId=215764\">\r\nhttp://obtics.codeplex.com/Thread/View.aspx?ThreadId=215764</a></p>\r\n<p>Best regards,<br>\r\nVincent</p>\r\n</div>\r\n",
    "PostedDate": "2011-01-22T01:29:00.357-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553826",
    "ThreadId": "236924",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>Sorry; I didn't test the code with silverlight and forgot that under silverlight lambda expressions&nbsp;containing anonymous types will not compile. Here is a slightly modified version that I tested with silverlight 4.0.</p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> ExpressionObserverExtensions\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, T&gt;(Expression&lt;Func&lt;P1, T&gt;&gt; exp, Obtics.Async.IWorkQueue workQueue)\r\n        {\r\n            <span style=\"color:blue\">var</span> directFunc = exp.Compile();\r\n            <span style=\"color:blue\">var</span> observableFunc = ExpressionObserver.Compile(exp);\r\n            <span style=\"color:blue\">var</span> carrousel =\r\n                Carrousel.Create(\r\n                    (P1 p1) =&gt;\r\n                    {\r\n                        <span style=\"color:blue\">var</span> s = ValueProvider.Dynamic(Tuple.Create( p1, ValueProvider.Static(directFunc(p1)) ));\r\n\r\n                        workQueue.QueueWorkItem(\r\n                            obj =&gt; s.Value =Tuple.Create(p1, observableFunc(p1)),\r\n                            <span style=\"color:blue\">null</span>\r\n                        );\r\n\r\n                        <span style=\"color:blue\">return</span> s;\r\n                    },\r\n                    o =&gt; o.Value.Item1\r\n                )\r\n            ;\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Func&lt;P1, IValueProvider&lt;T&gt;&gt;(p1 =&gt; carrousel(p1).Select(o =&gt; o.Item2));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, T&gt;(Expression&lt;Func&lt;P1, T&gt;&gt; exp)\r\n        { <span style=\"color:blue\">return</span> CompileDelayedObservable(exp, Obtics.Async.WorkQueue.DefaultWorkQueueProvider.GetWorkQueue()); }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, P2, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, P2, T&gt;(Expression&lt;Func&lt;P1, P2, T&gt;&gt; exp, Obtics.Async.IWorkQueue workQueue)\r\n        {\r\n            <span style=\"color:blue\">var</span> directFunc = exp.Compile();\r\n            <span style=\"color:blue\">var</span> observableFunc = ExpressionObserver.Compile(exp);\r\n            <span style=\"color:blue\">var</span> carrousel =\r\n                Carrousel.Create(\r\n                    (P1 p1, P2 p2) =&gt;\r\n                    {\r\n                        <span style=\"color:blue\">var</span> s = ValueProvider.Dynamic( Tuple.Create(p1, p2, ValueProvider.Static(directFunc(p1, p2)) ));\r\n\r\n                        workQueue.QueueWorkItem(\r\n                            obj =&gt; s.Value = Tuple.Create(p1, p2, observableFunc(p1, p2) ),\r\n                            <span style=\"color:blue\">null</span>\r\n                        );\r\n\r\n                        <span style=\"color:blue\">return</span> s;\r\n                    },\r\n                    o =&gt; o.Value.Item1,\r\n                    o =&gt; o.Value.Item2\r\n                )\r\n            ;\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Func&lt;P1, P2, IValueProvider&lt;T&gt;&gt;((p1, p2) =&gt; carrousel(p1, p2).Select(o =&gt; o.Item3));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Func&lt;P1, P2, IValueProvider&lt;T&gt;&gt; CompileDelayedObservable&lt;P1, P2, T&gt;(Expression&lt;Func&lt;P1, P2, T&gt;&gt; exp)\r\n        { <span style=\"color:blue\">return</span> CompileDelayedObservable(exp, Obtics.Async.WorkQueue.DefaultWorkQueueProvider.GetWorkQueue()); }\r\n\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-22T20:33:12.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "565701",
    "ThreadId": "236924",
    "Html": "<p>Hi Throb,</p>\r\n<p>Sorry for the response time, i am very busy theses days.<br /><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">My</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">application</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">is</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">now</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">in</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">production</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">a</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">second</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">release</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">coming</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">soon</span><span title=\"Cliquer ici pour voir d'autres traductions\">, I test&nbsp;</span><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">CompileDelayedObservable</span>&nbsp;s<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">o</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">at that time</span><span title=\"Cliquer ici pour voir d'autres traductions\">.</span></p>\r\n<p><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">I would like</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">to</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">update</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Obtics</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">in</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">my</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">second</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">release</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">by</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">cons</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">I</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">can not find</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">stable version</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">when it comes</span>&nbsp;<span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">next?</span></p>\r\n<p><em><strong><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Vincent&nbsp;</span></strong></em></p>",
    "PostedDate": "2011-02-14T00:32:54.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566342",
    "ThreadId": "236924",
    "Html": "<p>Hi Vincent,</p>\r\n<p>No probs, bussy here too. Progress on Obtics is slow at the moment. The code base is hughe and I have little time. Working on it in small steps. I think the project needs extra hands to get to any form of new&nbsp;release soon.</p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>",
    "PostedDate": "2011-02-15T00:40:36.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "575059",
    "ThreadId": "236924",
    "Html": "<p>Hi Throb,</p>\r\n<p>I try the CompileDelayedObservable but i have a question. <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Why</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">use</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">UIThread</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">to create</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">the</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">pipeline</span><span title=\"Cliquer ici pour voir d'autres traductions\">?</span></p>\r\n<p><span id=\"result_box\" class=\"long_text\" lang=\"en\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Another question</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">is</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">there</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">an</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">extension method</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">for</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">the</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">buffered</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">CollectionChanged</span><span title=\"Cliquer ici pour voir d'autres traductions\">?</span><br /><br /><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">For</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">example</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">if</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">there are</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">100</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">items</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">added</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">all at once</span><span title=\"Cliquer ici pour voir d'autres traductions\">.</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Instead of triggering</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">the</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">CollectionChanged</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">in</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">a single</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">loop,</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">it</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">is better</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">than</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">CollectionChanged</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">event</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">is fired</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">100 times</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">at regular intervals of</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">20ms</span><span title=\"Cliquer ici pour voir d'autres traductions\">, for example</span><span title=\"Cliquer ici pour voir d'autres traductions\">?</span><br /><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">This prevents</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">the</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">UI</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">from freezing</span><span title=\"Cliquer ici pour voir d'autres traductions\">.</span></span></span></span></p>\r\n<p><span class=\"long_text\" lang=\"en\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\"><span title=\"Cliquer ici pour voir d'autres traductions\">Sorry for my english.</span></span></span></span></p>\r\n<p><strong><span class=\"long_text\" lang=\"en\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\"><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\"><span title=\"Cliquer ici pour voir d'autres traductions\">Vincent</span></span></span></span></strong></p>",
    "PostedDate": "2011-03-03T07:16:30.203-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "576902",
    "ThreadId": "236924",
    "Html": "<p>Hi Vincent,</p>\r\n<p>No reason to use the UI thread as far as Obtics is concerned. I used the UI thread as default because it is safer. You can&nbsp;use&nbsp;any other thread.&nbsp;I guess you will need to make sure you switch back to the UI thread&nbsp;when you bind to your view elements (use the&nbsp;Async() methods).</p>\r\n<p>Also; ObservableEnumerable.Async() is the extension method that uses the BufferTransformation. Allows you to specify a 'drop off' percentage. Say if that is 10% then if number of events in queue compared to the number of elements in the collection is more than 1/10 then the buffertransformation will default to a 'Reset' event.</p>\r\n<p>Obtics at the moment only supports single item changes. This is because multi item changes become very complicated with some transformations. May introduce it again though in the future.</p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>",
    "PostedDate": "2011-03-07T15:30:23.73-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577041",
    "ThreadId": "236924",
    "Html": "<p><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Thank you</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">for your</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">reply</span><span title=\"Cliquer ici pour voir d'autres traductions\">.</span><br /><br /><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Yes</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">the</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">problem</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">is</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">not</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">that</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Obtics</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">manages</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">a</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">single item</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">at</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">a time</span><span title=\"Cliquer ici pour voir d'autres traductions\">,</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">my</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">question</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">is</span><span title=\"Cliquer ici pour voir d'autres traductions\">:</span></p>\r\n<p><span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">Is there</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">a</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">transformation</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">that</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">forces</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">between</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">each</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">triggering</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">event</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">CollectionChanged</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">he</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">spends at least</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">20</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">ms</span><span title=\"Cliquer ici pour voir d'autres traductions\">?</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">To not</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">freeze</span> <span class=\"hps\" title=\"Cliquer ici pour voir d'autres traductions\">the UI</span><span title=\"Cliquer ici pour voir d'autres traductions\">.</span></p>\r\n<p><em><strong><span title=\"Cliquer ici pour voir d'autres traductions\">Vincent</span></strong></em></p>",
    "PostedDate": "2011-03-08T00:57:01.853-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577095",
    "ThreadId": "236924",
    "Html": "<p>What you could do is implement your own IWorkQueue. Obtics already provides 2. One for doing jobs using the default Dispatcher (WPF and Silverlight) and one for doing jobs on the ThreadPool.</p>\r\n<p>You could create one that processes jobs on a regular interval (every 20ms). Then you use this one when you call Async(IWorkQueue queue) just before you bind your UI elements.</p>\r\n<p>Lowerdown in the transformation pipeline it may be more benificial to use the ThreadPool work queue. So roughly it would look like:</p>\r\n<p><em>YourObservableCollection.Async( WorkQueueOnThreadPoolAdapter.Get() ).. do your complicated stuff .. .Async( your20MsWorkQueue )</em></p>\r\n<p>Or:</p>\r\n<p><em>static Func&lt;In,IValueProvider&lt;Out&gt;&gt; _f = CompileDelayedObservable&lt;In, Out&gt;( in =&gt; ..the expression.. , WorkQueueOnThreadPoolAdapter.Get());</em></p>\r\n<p><em>IValueProvider&lt;Out&gt; F(In in) { return _f(in).Async( your20MsWorkQueue ); }</em></p>\r\n<p>Regs,</p>\r\n<p>Thomas</p>",
    "PostedDate": "2011-03-08T02:44:39.31-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]