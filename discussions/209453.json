[
  {
    "Id": "431476",
    "ThreadId": "209453",
    "Html": "<p>Thomas, How've you been.</p>\r\n<p>I had asked you a question in the previous thread about Binding a Treeview to an ExpressionObserver (<a href=\"http://obtics.codeplex.com/Thread/View.aspx?ThreadId=205004\">http://obtics.codeplex.com/Thread/View.aspx?ThreadId=205004</a>). I have explained the scenario in detail in teh previous post, where I have an Observable collection of raw values and am trying to create a hierarchicalview&nbsp;grouped by Dest and SubDest.&nbsp;I am successfully able to bind the OrdersgroupedBySubDest (as per previous post) to the treeview. However I have noticed that as the ObservableCollection triggers the NotifyChanged event, the treeview automatically collapses and loses its ViewState. By ViewState, i mean that if certain nodes are open, they do reflect the change but also collapse. I have attached the snippet below. The tree binds to OrdersGroupedBySubDest. Below are the ExpressionObserver definition and the TreeView definitions.</p>\r\n<p>There are no issues in binding. However when the underlying observablecollection (childOrdersList) gets updated, the treeview collapses to its original form. I was trying to keep it to maintain its current state e.g. if nodes 2 and 3 are open along with 2(a) and 3(b), then the tree should nt collapse on a notificationChange.</p>\r\n<p>Again any help in this regards will be greatly appreciated.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\"><pre>1\r\n2\r\n  a\r\n3\r\n  a\r\n  b\r\n     bi\r\n     bii\r\n4\r\n5</pre>\r\n</span></pre>\r\n<pre><span style=\"color:Blue\">public</span> IEnumerable&lt;OutboundSummary&gt; OrdersGroupedBySubDest\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span>\r\n                    OE.Async(\r\n                            ExpressionObserver.Execute(\r\n                                () =&gt;\r\n                                    (\r\n                                        childOrdersList.GroupBy(x =&gt; <span style=\"color:Blue\">new</span> { x.SubDest })\r\n                                            .Select(x =&gt; <span style=\"color:Blue\">new</span> OutboundSummary\r\n                                            {\r\n                                                SubDest = x.First().SubDest,\r\n                                                TotalOrders = x.Count(c =&gt; c.isActive),\r\n                                                TotalShares = x.Sum(c =&gt; c.ExecShares),\r\n                                                OutboundGroups = (<span style=\"color:Blue\">from</span> d <span style=\"color:Blue\">in</span> x\r\n                                                                  <span style=\"color:Blue\">group</span> d <span style=\"color:Blue\">by</span> <span style=\"color:Blue\">new</span> { d.Dest } <span style=\"color:Blue\">into</span> pg\r\n                                                                  <span style=\"color:Blue\">select</span> <span style=\"color:Blue\">new</span> OutboundSummary()\r\n                                                                  {\r\n                                                                      Dest = pg.Key.Dest,\r\n                                                                      TotalOrders = pg.Count(c =&gt; c.isActive),\r\n                                                                      TotalShares = pg.Sum(c =&gt; c.ExecShares),\r\n                                                                      OutboundGroups = (\r\n                                                                            <span style=\"color:Blue\">from</span> d <span style=\"color:Blue\">in</span> pg\r\n                                                                            <span style=\"color:Blue\">group</span> d <span style=\"color:Blue\">by</span> <span style=\"color:Blue\">new</span> { d.Src } <span style=\"color:Blue\">into</span> pg2\r\n                                                                            <span style=\"color:Blue\">select</span> <span style=\"color:Blue\">new</span> OutboundSummary()\r\n                                                                            {\r\n                                                                                System = pg2.First().Src,\r\n                                                                                TotalOrders = pg.Count(c=&gt;c.isActive),\r\n                                                                                TotalShares = pg.Sum(c =&gt; c.ExecShares),\r\n                                                                            }),\r\n                                                                  }),\r\n\r\n                                            })<span style=\"color:Green\">//.OrderByDescending(c =&gt; c.SubDest)</span>\r\n                                    )\r\n                            ).Cascade()\r\n                        );\r\n            }\r\n        }\r\n</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">\t\t&lt;</span><span style=\"color:#A31515\">Grid</span> <span style=\"color:Red\">Grid.IsSharedSizeScope</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid.RowDefinitions</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">RowDefinition</span> <span style=\"color:Red\">Height</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Auto</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">RowDefinition</span><span style=\"color:Blue\">/&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid.RowDefinitions</span><span style=\"color:Blue\">&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">OrderDetailTemplate</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                                    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=System}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>(<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=TotalShares}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>,<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=TotalOrders}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>)<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                  <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">TextBlock</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Green\">&lt;!-- ORDER TEMPLATE --&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span> \r\n                                      <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">OrderTemplate</span><span style=\"color:Black\">&quot;</span>\r\n                                      <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding OutboundGroups}</span><span style=\"color:Black\">&quot;</span>\r\n                                      <span style=\"color:Red\">ItemTemplate</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource OrderDetailTemplate}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                                    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=SubDest}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>(<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=TotalShares}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>,<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=TotalOrders}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>)<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                     <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">TextBlock</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n                                 <span style=\"color:Green\">&lt;!-- CUSTOMER TEMPLATE --&gt;</span>\r\n                                 <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span> \r\n                                      <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">CustomerTemplate</span><span style=\"color:Black\">&quot;</span>\r\n                                      <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding OutboundGroups}</span><span style=\"color:Black\">&quot;</span>\r\n                                      <span style=\"color:Red\">ItemTemplate</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource OrderTemplate}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                                    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=Dest}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>(<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=TotalShares}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>,<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=TotalOrders}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>)<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Run</span><span style=\"color:Blue\">&gt;</span>\r\n                                     <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">TextBlock</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TreeView</span>\r\n                                <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">_treeView</span><span style=\"color:Black\">&quot;</span>\r\n                                <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=.}</span><span style=\"color:Black\">&quot;</span>\r\n                                <span style=\"color:Red\">ItemTemplate</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource CustomerTemplate}</span><span style=\"color:Black\">&quot;</span>\r\n                             <span style=\"color:Blue\">/&gt;</span>\r\n                        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n<pre>BTW this is one of the best reactive linq libraries out there. I hope you continue to maintain this as the versions of silverlight and WPF update.</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2010-04-15T07:31:10.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431515",
    "ThreadId": "209453",
    "Html": "<p>On a similar note. The selectedIndex of the treeview also changes. The same happens when the Result from ExpressionObserver is binded to a datagrid.</p>",
    "PostedDate": "2010-04-15T08:50:48.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "433263",
    "ThreadId": "209453",
    "Html": "<p>Hi,</p>\r\n<p>Could it be that your OutboundSummary class does&nbsp;NOT&nbsp;have an equals override? In that case the treeview may not be able to logically&nbsp;match two OutboundSummaries. (An old and a new one that was created after an update. The treeview would recognize it as a completely new and different node)&nbsp;</p>\r\n<p>Regards,</p>\r\n<p>Thomas</p>",
    "PostedDate": "2010-04-20T10:44:17.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "433292",
    "ThreadId": "209453",
    "Html": "<p>Would it be a new node even if its just a value update? Can you give me an example of&nbsp;how I&nbsp;should differentiate the instances in th Equals method? I am grouping it by 3 different attributes Dest | SubDest | System.</p>\r\n<p>Thanks</p>\r\n<p>Vinay</p>",
    "PostedDate": "2010-04-20T11:36:19.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "433320",
    "ThreadId": "209453",
    "Html": "<p>I attempted to add the following Equals and GetHashCode methods. I basically want to display any change where the values of Totalorders and Execshares change. this will happen if any of the attributes within the 3 groups (Dest/SubDest/System) change. An idea or approach will be appreciated.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>         <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> Equals(<span style=\"color:blue\">object</span> obj)\r\n        {\r\n            <span style=\"color:blue\">bool</span> ret = <span style=\"color:blue\">true</span>;\r\n            OutboundSummary o = obj <span style=\"color:blue\">as</span> OutboundSummary;\r\n\r\n            <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">string</span>.IsNullOrEmpty(o.SubDest) &amp;&amp; !<span style=\"color:blue\">string</span>.IsNullOrEmpty(<span style=\"color:blue\">this</span>.SubDest))\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.SubDest.Equals(o.SubDest) &amp;&amp; <span style=\"color:blue\">this</span>.ExecShares == o.ExecShares &amp;&amp; <span style=\"color:blue\">this</span>.TotalShares == o.ExecShares)\r\n                    ret = <span style=\"color:blue\">true</span>;\r\n                <span style=\"color:blue\">else</span>\r\n                    ret = <span style=\"color:blue\">false</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">string</span>.IsNullOrEmpty(o.Dest) &amp;&amp; !<span style=\"color:blue\">string</span>.IsNullOrEmpty(<span style=\"color:blue\">this</span>.Dest))\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.Dest.Equals(o.Dest) &amp;&amp; <span style=\"color:blue\">this</span>.ExecShares == o.ExecShares &amp;&amp; <span style=\"color:blue\">this</span>.TotalShares == o.ExecShares)\r\n                    ret = <span style=\"color:blue\">true</span>;\r\n                <span style=\"color:blue\">else</span>\r\n                    ret = <span style=\"color:blue\">false</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">string</span>.IsNullOrEmpty(o.System) &amp;&amp; !<span style=\"color:blue\">string</span>.IsNullOrEmpty(<span style=\"color:blue\">this</span>.System))\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.System.Equals(o.System) &amp;&amp; <span style=\"color:blue\">this</span>.ExecShares == o.ExecShares &amp;&amp; <span style=\"color:blue\">this</span>.TotalShares == o.ExecShares)\r\n                    ret = <span style=\"color:blue\">true</span>;\r\n                <span style=\"color:blue\">else</span>\r\n                    ret = <span style=\"color:blue\">false</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n                ret = <span style=\"color:blue\">false</span>;\r\n\r\n            <span style=\"color:blue\">return</span> ret;\r\n            <span style=\"color:green\">//return base.Equals(obj);</span>\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> GetHashCode()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">base</span>.GetHashCode();\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-20T12:56:19.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "434342",
    "ThreadId": "209453",
    "Html": "<p>Would an equals like this work? :</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> Equals(<span style=\"color:blue\">object</span> other)\r\n{\r\n    <span style=\"color:blue\">var</span> o = other <span style=\"color:blue\">as</span> OutboundSummary;\r\n\r\n    <span style=\"color:blue\">return</span>\r\n        o != <span style=\"color:blue\">null</span>\r\n        &amp;&amp; <span style=\"color:blue\">object</span>.Equals(SubDest, o.SubDest)\r\n        &amp;&amp; <span style=\"color:blue\">object</span>.Equals(Dest, o.Dest)\r\n        &amp;&amp; <span style=\"color:blue\">object</span>.Equals(System, o.System)\r\n    ;\r\n}\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> GetHashCode()\r\n{\r\n    <span style=\"color:blue\">return</span>\r\n        (SubDest == <span style=\"color:blue\">null</span> ? 0 : SubDest.GetHashCode())\r\n        + (Dest == <span style=\"color:blue\">null</span> ? 0 : Dest.GetHashCode())\r\n        + (System == <span style=\"color:blue\">null</span> ? 0 : System.GetHashCode())\r\n    ;\r\n}\r\n</pre>\r\n</div>\r\n<p>I Guess the Orders and Shares would not be part of the identity of your node. (since they&nbsp;may vary&nbsp;for what is logically the same node)</p>\r\n<p>Regs,</p>\r\n<p>Thomas</p>",
    "PostedDate": "2010-04-22T13:47:30.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "434646",
    "ThreadId": "209453",
    "Html": "<p>Thomas, thanks for the response. I will give this a try.</p>",
    "PostedDate": "2010-04-23T07:53:19.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "434726",
    "ThreadId": "209453",
    "Html": "<p>I did try the&nbsp;approach you mentioned above. The issue is even though the tree does not collapse. I do not see any updates. The way the code is supposed to work is the upper level tree is suupposed to reflect the changes when a value within the lowest group changes. Since the aggregation trickles upward from the System to Dest to SubDest, any particular value update on the raw object should (within the observablecollection) should show the appropriate value update on the tree items too.</p>\r\n<p>Also I notice that the equals function does not actually get hit until I open a particular treeitem. Is that how it should work?</p>",
    "PostedDate": "2010-04-23T10:58:32.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "435198",
    "ThreadId": "209453",
    "Html": "<p>I see how my last reply didn't help at all. I'm afraid it can not be done in a single statement. The TotalOrders and TotalShares properties will need to be observable.</p>\r\n<p>Possibly this code will help? :</p>\r\n<p>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> OutboundSummary&lt;TKey&gt; <br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IGrouping&lt;TKey, X&gt; _Src;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> Equals(<span style=\"color:blue\">object</span> obj)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">var</span> other = obj <span style=\"color:blue\">as</span> OutboundSummary&lt;TKey&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">return</span> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; other != <span style=\"color:blue\">null</span> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; <span style=\"color:blue\">this</span>.GetType() == other.GetType() <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; EqualityComparer&lt;TKey&gt;.Default.Equals(_Src.Key, other._Src.Key)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> GetHashCode()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.GetType().GetHashCode() + EqualityComparer&lt;TKey&gt;.Default.GetHashCode(_Src.Key); }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">static</span> Func&lt;IEnumerable&lt;X&gt;, IValueProvider&lt;<span style=\"color:blue\">int</span>&gt;&gt; _OrdersF =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpressionObserver.Compile(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IEnumerable&lt;X&gt; grp) =&gt; grp.Count(c =&gt; c.IsActive)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IValueProvider&lt;<span style=\"color:blue\">int</span>&gt; TotalOrders { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _OrdersF(_Src); } }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">static</span> Func&lt;IEnumerable&lt;X&gt;, IValueProvider&lt;<span style=\"color:blue\">decimal</span>&gt;&gt; _SharesF =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpressionObserver.Compile(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IEnumerable&lt;X&gt; grp) =&gt; grp.Sum(c =&gt; c.ExecShares)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IValueProvider&lt;<span style=\"color:blue\">decimal</span>&gt; TotalShares { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _SharesF(_Src); } }<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SrcSummary : OutboundSummary&lt;<span style=\"color:blue\">string</span>&gt;<br>&nbsp;&nbsp;&nbsp; { <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> System { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _Src.Key; } } }<br><br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> DestSummary : OutboundSummary&lt;<span style=\"color:blue\">long</span>&gt;<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">long</span> Dest { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _Src.Key; } }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">static</span> Func&lt;IEnumerable&lt;X&gt;, IValueProvider&lt;IEnumerable&lt;SrcSummary&gt;&gt;&gt; _OutboundGroupsF =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpressionObserver.Compile(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IEnumerable&lt;X&gt; grp) =&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">from</span> d <span style=\"color:blue\">in</span> grp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">group</span> d <span style=\"color:blue\">by</span> d.Src <span style=\"color:blue\">into</span> pg<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">select</span> <span style=\"color:blue\">new</span> SrcSummary { _Src = pg }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IEnumerable&lt;SrcSummary&gt; OutboundGroups { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _OutboundGroupsF(_Src).Cascade(); } }<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SubDestSummary : OutboundSummary&lt;<span style=\"color:blue\">int</span>&gt;<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> SubDest { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _Src.Key; } }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">static</span> Func&lt;IEnumerable&lt;X&gt;, IValueProvider&lt;IEnumerable&lt;DestSummary&gt;&gt;&gt; _OutboundGroupsF = ExpressionObserver.Compile(</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IEnumerable&lt;X&gt; grp) =&gt; <span style=\"color:blue\">from</span> d <span style=\"color:blue\">in</span> grp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">group</span> d <span style=\"color:blue\">by</span> d.Dest <span style=\"color:blue\">into</span> pg<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">select</span> <span style=\"color:blue\">new</span> DestSummary { _Src = pg }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IEnumerable&lt;DestSummary&gt; OutboundGroups { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _OutboundGroupsF(_Src).Cascade(); } }<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IEnumerable&lt;SubDestSummary&gt; OrdersGroupedBySubDest<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">get</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OE.Async(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpressionObserver.Execute(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; () =&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">from</span> d <span style=\"color:blue\">in</span> childOrdersList<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">group</span> d <span style=\"color:blue\">by</span> d.SubDest <span style=\"color:blue\">into</span> pg<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">select</span> <span style=\"color:blue\">new</span> SubDestSummary { _Src = pg }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Cascade()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>The types of Dest, SubDest etc. are probably not what they should be but you can fix that.&nbsp;In XAML&nbsp;you wouldn't bind to the TotalShares and TotalOrders properties directly.&nbsp;These properties&nbsp;now return IValueProvider objects and you need to bind to their Value properties.</p>\r\n<p>Hope this&nbsp;does help,</p>\r\n<p>Regs,</p>\r\n<p>Thomas.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-25T11:10:45.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "435200",
    "ThreadId": "209453",
    "Html": "<p>I Forgot:</p>\r\n<p>If your source is updated on different threads than the UI thread then you need to aply an Async call to all the observable properties (TotalShared, TotalOrders and OutboundGroups)</p>\r\n<p>Regards,</p>\r\n<p>Thomas</p>",
    "PostedDate": "2010-04-25T11:18:36.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]