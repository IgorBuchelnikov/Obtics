[
  {
    "Id": "512581",
    "ThreadId": "232331",
    "Html": "\r\n<p>Hi guys,</p>\r\n<p>I don't like exposing a IValueProvider on my ViewModel, I therefore created a IValueProvider extension. Following its use:</p>\r\n<p>What do you think?</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//In my Constructor</span></pre>\r\n<pre>ExpressionObserver.Execute(() =&gt; <span style=\"color:blue\">this</span>._selectedSlots.Count() &gt; 1).PushTo(() =&gt; <span style=\"color:blue\">this</span>.ShowMultipleDetails);\r\n\r\n<span style=\"color:green\">//Property of my ViewModel</span>\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> _showMultipleDetails;\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowMultipleDetails\r\n{\r\n    <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _showMultipleDetails; }\r\n\r\n    <span style=\"color:blue\">set</span>\r\n    {\r\n        <span style=\"color:blue\">if</span> (_showMultipleDetails == value) <span style=\"color:blue\">return</span>;\r\n\r\n        _showMultipleDetails = value;\r\n        RaisePropertyChanged(<span style=\"color:#a31515\">&quot;ShowMultipleDetails&quot;</span>);\r\n    }\r\n}\r\n\r\n<span style=\"color:green\">//Extension</span>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> PushTo&lt;T&gt;(<span style=\"color:blue\">this</span> IValueProvider&lt;T&gt; vp, Expression&lt;Func&lt;T&gt;&gt; expression)\r\n{\r\n    MemberExpression body = (MemberExpression) (expression.Body);\r\n\r\n    <span style=\"color:blue\">object</span> target = ((ConstantExpression) (body.Expression)).Value;\r\n    PropertyInfo property = (PropertyInfo) body.Member;\r\n\r\n    property.SetValue(target, vp.Value, <span style=\"color:blue\">null</span>);\r\n\r\n    ((INotifyPropertyChanged) vp).PropertyChanged &#43;= (s, a)\r\n                                                      =&gt;\r\n                                                          {\r\n                                                              <span style=\"color:blue\">if</span> (a.PropertyName == <span style=\"color:#a31515\">&quot;Value&quot;</span>)\r\n                                                                  property.SetValue(target, vp.Value, <span style=\"color:blue\">null</span>);\r\n                                                          };\r\n}</pre>\r\n</div>\r\n<p>Best regards,<br>\r\nVincent BOUZON</p>\r\n",
    "PostedDate": "2010-10-26T01:59:29.873-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513216",
    "ThreadId": "232331",
    "Html": "\r\n<p>Hi Vincent,</p>\r\n<p>This is some interesting work. There is one important difficulty with it though and that is that you run a serious risk of memory leaks. You should always unregister event handlers when you are done with them. Especially with Obtics. It creates a meriad\r\n of event bindings form sources to your object and these bindings&nbsp;might keep your object alive longer than you want (forever).</p>\r\n<p>Here are two patterns that I use in cases like yours. The first (X) has an automatic unregistration though you still must be weary of 'circular references'. Meaning that if you would have two objects&nbsp;a and&nbsp;b of type X and a listens to Npc events\r\n on b and b listens to Npc events on a then they will prevent each other from unregistering. The second (Y) uses a more 'classic' unregistration with IDispose. In that case though you will always have to manually call the Dispose method which can be quite awkward\r\n sometimes.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">class</span> XBase : INotifyPropertyChanged\r\n    {\r\n        <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler _PropertyChanged;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged\r\n        {\r\n            add\r\n            {\r\n                <span style=\"color:blue\">if</span> (_PropertyChanged == <span style=\"color:blue\">null</span>)\r\n                    OnNpcClientsRegistered();\r\n\r\n                _PropertyChanged &#43;= value;\r\n            }\r\n            remove\r\n            {\r\n                <span style=\"color:blue\">bool</span> hadSome = _PropertyChanged != <span style=\"color:blue\">null</span>;\r\n\r\n                _PropertyChanged -= value;\r\n\r\n                <span style=\"color:blue\">if</span> (hadSome &amp;&amp; _PropertyChanged == <span style=\"color:blue\">null</span>)\r\n                    OnNpcClientsUnregistered();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnNpcClientsRegistered()\r\n        {}\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnNpcClientsUnregistered()\r\n        {}\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propName)\r\n        {\r\n            <span style=\"color:blue\">if</span> (_PropertyChanged != <span style=\"color:blue\">null</span>)\r\n                _PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propName));\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n        \r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> X : XBase\r\n    {\r\n        <span style=\"color:blue\">public</span> X()\r\n        {\r\n            _Prop = ExpressionObserver.Execute(() =&gt; a.b.c);\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnNpcClientsRegistered()\r\n        {\r\n            <span style=\"color:blue\">base</span>.OnNpcClientsRegistered();\r\n            ((INotifyPropertyChanged) _Prop).PropertyChanged &#43;= _PropChanged;\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnNpcClientsUnregistered()\r\n        {\r\n            <span style=\"color:blue\">base</span>.OnNpcClientsUnregistered();\r\n            ((INotifyPropertyChanged) _Prop).PropertyChanged -= _PropChanged;\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> _PropChanged(<span style=\"color:blue\">object</span> sender, PropertyChangedEventArgs args)\r\n        {\r\n            <span style=\"color:blue\">if</span>(args.PropertyName == <span style=\"color:#a31515\">&quot;Value&quot;</span>)\r\n                OnPropertyChanged(<span style=\"color:#a31515\">&quot;Prop&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;<span style=\"color:blue\">int</span>&gt; _Prop;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Prop\r\n        { <span style=\"color:blue\">get</span>{ <span style=\"color:blue\">return</span> _Prop.Value; } }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> YBase : INotifyPropertyChanged, IDisposable\r\n    {\r\n        <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propName)\r\n        {\r\n            <span style=\"color:blue\">if</span> (PropertyChanged != <span style=\"color:blue\">null</span>)\r\n                PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propName));\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>     \r\n   \r\n        <span style=\"color:blue\">#region</span> IDisposable Members\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Dispose()\r\n        { Dispose(<span style=\"color:blue\">true</span>); }\r\n\r\n        ~YBase()\r\n        { Dispose(<span style=\"color:blue\">false</span>); }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> Dispose(<span style=\"color:blue\">bool</span> disposing)\r\n        { }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> Y : YBase\r\n    {\r\n        <span style=\"color:blue\">public</span> Y()\r\n        {\r\n            _Prop = ExpressionObserver.Execute(() =&gt; a.b.c);\r\n            ((INotifyPropertyChanged)_Prop).PropertyChanged &#43;= _PropChanged;\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Dispose(<span style=\"color:blue\">bool</span> disposing)\r\n        {\r\n            <span style=\"color:blue\">if</span> (disposing)\r\n                ((INotifyPropertyChanged)_Prop).PropertyChanged -= _PropChanged;</pre>\r\n<pre>            base.Dispose(disposing);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> _PropChanged(<span style=\"color:blue\">object</span> sender, PropertyChangedEventArgs args)\r\n        {\r\n            <span style=\"color:blue\">if</span> (args.PropertyName == <span style=\"color:#a31515\">&quot;Value&quot;</span>)\r\n                OnPropertyChanged(<span style=\"color:#a31515\">&quot;Prop&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> IValueProvider&lt;<span style=\"color:blue\">int</span>&gt; _Prop;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Prop\r\n        { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _Prop.Value; } }    \r\n    }\r\n</pre>\r\n</div>\r\n<p>In both cases you loose some advantages that you would have if you exposed value providers directly (properties with type IValueProvider&lt;T&gt; and not storing&nbsp;the value providers&nbsp;in fields).</p>\r\n<ol>\r\n<li>Code is much simpler. </li><li>Lazy initialization of the value providers. (they get created only when you need them and not on beforehand)\r\n</li><li>Automatic cleanup of value providers that are not used anymore. Because you don't store them in fields. When clients&nbsp;release all references to the value provider&nbsp;the GC can dispose of them. This can be significant&nbsp;when you have a lot of objects.\r\n</li></ol>\r\n<p>Hope this helps,</p>\r\n<p>Thomas.</p>\r\n",
    "PostedDate": "2010-10-27T00:51:25.893-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515962",
    "ThreadId": "232331",
    "Html": "\r\n<p><span>Thank you for your reply.&nbsp;</span><span>Yes, there are also some other problems .. it is better to expose value providers directly.</span></p>\r\n<div id=\"x_x_x_gt-form-c\">\r\n<div id=\"x_x_x_gt-res-c\">\r\n<div id=\"x_x_x_gt-res-p\">\r\n<div id=\"x_x_x_gt-res-data\">\r\n<div id=\"x_x_x_gt-res-content\">\r\n<div dir=\"ltr\"><span>Best regards,</span></div>\r\n<div dir=\"ltr\"><span>Vincent</span></div>\r\n<div dir=\"ltr\">\r\n<div><span><br>\r\n</span></div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-02T08:03:56.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518783",
    "ThreadId": "232331",
    "Html": "\r\n<p>Hi,</p>\r\n<p>When i expose value provider directly, the binding throw an exception MethodAccessException.</p>\r\n<p>I must add&nbsp;</p>\r\n<p>[assembly: InternalsVisibleTo(&quot;System.Windows,PublicKey=00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB&quot;,\r\n AllInternalsVisible=false)]</p>\r\n<p>in the file AssemblyInfo.cs.</p>\r\n<p>Are you aware about this problem ?</p>\r\n<p>Vincent</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-08T07:08:15.19-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518992",
    "ThreadId": "232331",
    "Html": "\r\n<p>Yes,</p>\r\n<p>Silverlight is not able to discover the public&nbsp;Value property&nbsp;of the public IValueProvider interface but instead tries to use the internal property implementation. I guess this is because&nbsp;an object might have multiple Value properties on mutliple\r\n interfaces&nbsp;and it can not determine which one to use just by name. You will need the Concrete() extension method in the BindingHelper library.</p>\r\n<p>Check out this thread: <a href=\"http://obtics.codeplex.com/Thread/View.aspx?ThreadId=65753\">\r\nhttp://obtics.codeplex.com/Thread/View.aspx?ThreadId=65753</a></p>\r\n<p>Regs,</p>\r\n<p>Thomas.</p>\r\n",
    "PostedDate": "2010-11-08T13:29:35.947-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519109",
    "ThreadId": "232331",
    "Html": "\r\n<p>Ok thank you, for now I use InternalsVisibleTo because I use the Silverlight version provided here:&nbsp;</p>\r\n<p><span><a href=\"http://obtics.codeplex.com/Thread/View.aspx?ThreadId=215764\">http://obtics.codeplex.com/Thread/View.aspx?ThreadId=215764</a></span></p>\r\n<p><span><a href=\"http://obtics.codeplex.com/Thread/View.aspx?ThreadId=215764\"></a><br>\r\n</span><span>I tried to take the latest version of the library, and I did not have the same behavior as before, and more<br>\r\n</span><span>missing file ObservableEnumerable.Cache.cs.</span></p>\r\n<p>Vincent</p>\r\n",
    "PostedDate": "2010-11-08T19:22:47.483-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]