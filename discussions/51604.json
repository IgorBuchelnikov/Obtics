[
  {
    "Id": "173073",
    "ThreadId": "51604",
    "Html": "It look like there are many projects with same purpose. Continuous LINQ, Bindable LINQ, LiveLinq and now Obtics.Can you explain why there is four? Why Obtics? Is it not be better to work together?<br>\r\n<br>\r\nRegards,<br>\r\n<br>\r\nMaarten\r\n",
    "PostedDate": "2009-03-28T07:32:51.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "173075",
    "ThreadId": "51604",
    "Html": "<p style=\"margin:0cm 0cm 10pt\"><span style=\"font-family:calibri\">Hi Maarten.<br>\r\n<br>\r\nYes, I know about Bindable- and Continuous LINQ. I must say I didn't know about LiveLinq. I just googled it.<br>\r\n<br>\r\nObtics isn't that new. If you look at the history it has been around on CodePlex for quite a while already and the first ideas where conceived back in 2006. Obtics, like BLinq and Clinq, tries to create live Object LINQ queries. Obtics wants to do more; not just Linq. (That is why there is no 'LINQ' in the name). Obtics tries to create live <b><span style=\"font-family:'calibri','sans-serif'\">expressions,</span></b> including live Linq queries. So even 'simple' statements like <i><span style=\"font-family:'calibri','sans-serif'\">a + b * c</span></i> can yield a live and bindable result.<br>\r\n<br>\r\nNaturally I have been keeping an eye in Bindable- and Continuous LINQ. Those libraries are light and fast. But I think Obtics can crunch a whole lot more complex queries/expressions. If you can't get it to work with BLinq or CLinq you should try Obtics :-)<br>\r\n<br>\r\nAbout cooperation I completely agree. It seems a shame to invent the same ideas 3 - 4 times. I already tried to get in contact with the Bindable LINQ team. Possibly I did that a bit too clumsy. I should try again one day.<br>\r\n<br>\r\nThomas.</span></p>\r\n",
    "PostedDate": "2009-03-28T08:14:53.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "174930",
    "ThreadId": "51604",
    "Html": "<p>Ok, thanks for your answer.</p>\r\n<p>But is that not what binding would do? So Continuous LINQ + Bindings = Obtics?</p>\r\n<p>Regards,</p>\r\n<p>Maarten</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2009-04-02T11:15:44.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "175296",
    "ThreadId": "51604",
    "Html": "Hi Maarten,<br>\r\n<br>\r\nNo, I don't agree with your last statement that Continuous LINQ + Bindings = Obtics. <br>\r\n<br>\r\nObtics doesn't create bindings. You can't specify a target to a value or collection transformation. Rather it creates live values or sequences that you can bind to.<br>\r\na + b * c is a very simple example for an expression. Probably too much so. Obtics can take practically ANY expression and convert it into a live form (with some limitations concerning inner lambda functions).<br>\r\nThese live expression themselves can be easily chained to create even more complex live formulas. You can't do that using bindings, at least not in an easy way.<br>\r\n<br>\r\nI have a small raytracer technology demonstration. Though it is not the way obtics should be used, it shows what the static to live expression converter can do. If you can recreate the same example using bindings in just ten times the ammount of code I'll agree that there is little use to Obtics.<br>\r\n<br>\r\nThomas.\r\n",
    "PostedDate": "2009-04-03T08:00:45.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]