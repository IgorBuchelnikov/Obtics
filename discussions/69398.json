[
  {
    "Id": "236085",
    "ThreadId": "69398",
    "Html": "<p>Thomas,</p>\r\n<p>Is there a specific reason why the Binding to an element needs to be</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>DataContext=&quot;{Binding RelativeSource={RelativeSource Self}}\r\n</pre>\r\n</div>\r\n<p>This works if I have a textblock within the main grid. However, if i have a textblock within a Template of a datagrid, it does not seem to bind.</p>\r\n<p>On a similar note, is there also a&nbsp;way to&nbsp;Bind the ExpressionObserver over a PagedViewCollection&nbsp;or the DataContext of a control e.g. a Datagrid. I am trying to bind a datagrid to a PagedCollectionView which inturn is binded to an ObservableCollection. However, I need to track the current view shown by the PagedCollectionView (after a filter is applied / a different page is being viewed).</p>\r\n<p>Thanks again for the help.</p>\r\n<p>Vinay</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-18T08:36:07.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236345",
    "ThreadId": "69398",
    "Html": "<p>Hi Vinay,</p>\r\n<p>No, there is no special need for the DataContext to be set like that. It is just a way to bind to the desired values. Any valid binding will work. The obtics properties are just normal properties.</p>\r\n<p>But that is all standard WPF / Silverlight stuff. I'd suggest grab a good WPF / Silverlight book because there are may options.</p>\r\n<p>Regards,</p>\r\n<p>Thomas.</p>",
    "PostedDate": "2009-09-18T22:29:05.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236869",
    "ThreadId": "69398",
    "Html": "<p>In the sample you sent, if&nbsp;the&nbsp;DataContext is not set to RelativeSource Binding the information is not even displayed. I was nt sure if that was how it was intended. I was trying to implement the same on a Textblock included in a template (A Header template within a datagrid). However, in that case the binding does nt seem to pick up.</p>\r\n<p>Thanks</p>",
    "PostedDate": "2009-09-21T06:20:33.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "237100",
    "ThreadId": "69398",
    "Html": "<p>Hi Vinay,</p>\r\n<p>the Path in Bindings in WPF and Silverlight&nbsp;are searched from a sertain source. This source can be:</p>\r\n<ol>\r\n<li>Given explicitly using the Source attribute in the binding.</li>\r\n<li>Given explicitly using the ElementName attribute in the binding. This refers then to the object in the same namingscope as the element you set the binding on, with the specified name.</li>\r\n<li>Given relatively to the object you define the binding on using RelativeSource. (a bit limited in silverlight)</li>\r\n<li>Using the default which is the 'DataContext' of the element you set the binding on. This DataContext is passed from parent to child unless overriden on a given element.</li>\r\n</ol>\r\n<p>In the example the DataContext was overriden on the top-level element (UserControl), after which it was passed on to all it's children. The TextBox was a child of this&nbsp;UserControl and therefore inherited this DataContext. As you noticed this DataContext was set to the&nbsp;UserControl itself. This makes sense because the properties we wanted to bind&nbsp;to are on the UserControl (code behind). The Path in the binding then simply needed to refer to the Sum property of the UserControl and then the Value.</p>\r\n<p>Different way would have been to set a name on the UserControl and use ElementName in the binding.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl</span> <span style=\"color:Red\">x:Class</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Poc.MainPage</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">xmlns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black\">&quot;</span> \r\n    <span style=\"color:Red\">xmlns:x</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">xmlns:d</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/expression/blend/2008</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">xmlns:mc</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.openxmlformats.org/markup-compatibility/2006</span><span style=\"color:Black\">&quot;</span> \r\n    <span style=\"color:Red\">mc:Ignorable</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">d</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">d:DesignWidth</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">640</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">d:DesignHeight</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">480</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">TopDog</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">LayoutRoot</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBox</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding ElementName=TopDog, Path=Sum.Value}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>There are also some special things you can do in the path of a binding that has to do with the currently selected item in a view source.&nbsp;What way is best in your situation I don't know. Sometimes it can be quite tedious to get right. I do know that WPF/Silverlight programming is a lot about data binding. So my best advice is still to get a good book and study all the options and details.</p>\r\n<p>Hope this helps and Regs,</p>\r\n<p>Thomas.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-21T19:00:15.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]