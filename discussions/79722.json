[
  {
    "Id": "273023",
    "ThreadId": "79722",
    "Html": "<p>I upgraded to the trunk to get the fix you mentioned in a previous thread.&nbsp; Unfortunately, now some of our unit tests that were previously working are now failing.&nbsp; We aren't getting collection change events when we use the following code:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            <span style=\"color:Green\">// This first line is here to provide the basic idea and may not compile.</span>\r\n            Expression&lt;Func&lt;TItem, TDerived&gt;&gt; getDerivedExpression = p =&gt; p.Value;\r\n\r\n            Func&lt;TItem, IValueProvider&lt;TDerived&gt;&gt; getDervived = ExpressionObserver.Compile(getDerivedExpression);\r\n            Expression&lt;Func&lt;TItem, Tuple&lt;TItem, TDerived&gt;&gt;&gt; getPairExpression = item =&gt; <span style=\"color:Blue\">new</span> Tuple&lt;TItem, TDerived&gt;(item, getDervived(item).Value);\r\n            Func&lt;TItem, IValueProvider&lt;Tuple&lt;TItem, TDerived&gt;&gt;&gt; getPair = ExpressionObserver.Compile(getPairExpression);\r\n            <span style=\"color:Blue\">return</span> Obtics.Collections.ObservableEnumerable.Select(list, getPair);\r\n\r\n</pre>\r\n</div>\r\nAny ideas?</p>",
    "PostedDate": "2010-01-04T11:53:11.5-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "273035",
    "ThreadId": "79722",
    "Html": "<p>It looks like the regression has something to do with object equality.&nbsp; I've included a test that fails on the new obtics, but when the Equals region is commented out, it works again.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Collections.ObjectModel;\r\n<span style=\"color:Blue\">using</span> System.Collections.Specialized;\r\n<span style=\"color:Blue\">using</span> System.ComponentModel;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Linq.Expressions;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> NUnit.Framework;\r\n<span style=\"color:Blue\">using</span> Obtics.Values;\r\n\r\n<span style=\"color:Blue\">namespace</span> Pleasant.Watchers.Tests\r\n{\r\n    [TestFixture]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ObticsTests\r\n    {\r\n        [Test]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> TupleCollection()\r\n        {\r\n            <span style=\"color:Blue\">var</span> innerList = <span style=\"color:Blue\">new</span> ObservableCollection&lt;TestObject&gt;();\r\n\r\n            innerList.Add(<span style=\"color:Blue\">new</span> TestObject(3));\r\n            innerList.Add(<span style=\"color:Blue\">new</span> TestObject(5));\r\n            innerList.Add(<span style=\"color:Blue\">new</span> TestObject(1));\r\n\r\n            <span style=\"color:Blue\">var</span> tupleCollection = GetTupleCollection(innerList, o =&gt; o.Value);\r\n\r\n            <span style=\"color:Blue\">int</span> changeCount = 0;\r\n            (tupleCollection <span style=\"color:Blue\">as</span> INotifyCollectionChanged).CollectionChanged += <span style=\"color:Blue\">delegate</span> { changeCount++; };\r\n\r\n            innerList[1].Value = 9;\r\n\r\n            Assert.AreEqual(1, changeCount);\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Returns an observable collection of Tuples.  Value1 in the tuple will be the list item.</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Value2 in the tuple will be the result of the expression passed in.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;typeparam name=&quot;TItem&quot;&gt;</span><span style=\"color:Gray\">&lt;/typeparam&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;typeparam name=&quot;TDerived&quot;&gt;</span><span style=\"color:Gray\">&lt;/typeparam&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;getDerivedExpression&quot;&gt;</span><span style=\"color:Gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IEnumerable&lt;Tuple&lt;TItem, TDerived&gt;&gt; GetTupleCollection&lt;TItem, TDerived&gt;(IEnumerable&lt;TItem&gt; list, Expression&lt;Func&lt;TItem, TDerived&gt;&gt; getDerivedExpression)\r\n        {\r\n            Func&lt;TItem, IValueProvider&lt;TDerived&gt;&gt; getDervived = ExpressionObserver.Compile(getDerivedExpression);\r\n            Expression&lt;Func&lt;TItem, Tuple&lt;TItem, TDerived&gt;&gt;&gt; getPairExpression = item =&gt; <span style=\"color:Blue\">new</span> Tuple&lt;TItem, TDerived&gt;(item, getDervived(item).Value);\r\n            Func&lt;TItem, IValueProvider&lt;Tuple&lt;TItem, TDerived&gt;&gt;&gt; getPair = ExpressionObserver.Compile(getPairExpression);\r\n            <span style=\"color:Blue\">return</span> Obtics.Collections.ObservableEnumerable.Select(list, getPair);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> Tuple&lt;T1, T2&gt;\r\n        {\r\n            <span style=\"color:Blue\">public</span> T1 Value1 { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">set</span>; }\r\n            <span style=\"color:Blue\">public</span> T2 Value2 { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">set</span>; }\r\n\r\n            <span style=\"color:Blue\">public</span> Tuple(T1 value1, T2 value2)\r\n            {\r\n                Value1 = value1;\r\n                Value2 = value2;\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> Equals(<span style=\"color:Blue\">object</span> obj)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (obj == <span style=\"color:Blue\">null</span>)\r\n                    <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n\r\n                <span style=\"color:Blue\">if</span> (GetType() != obj.GetType())\r\n                    <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n\r\n                Tuple&lt;T1, T2&gt; tuple = (Tuple&lt;T1, T2&gt;)obj;\r\n\r\n                <span style=\"color:Blue\">return</span>\r\n                    EqualityComparer&lt;T1&gt;.Default.Equals(Value1, tuple.Value1) &amp;&amp;\r\n                    EqualityComparer&lt;T2&gt;.Default.Equals(Value2, tuple.Value2);\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">int</span> GetHashCode()\r\n            {\r\n                <span style=\"color:Blue\">int</span> hashCode = 0;\r\n                <span style=\"color:Blue\">if</span> (Value1 != <span style=\"color:Blue\">null</span>) hashCode ^= Value1.GetHashCode();\r\n                <span style=\"color:Blue\">if</span> (Value2 != <span style=\"color:Blue\">null</span>) hashCode ^= Value2.GetHashCode();\r\n                <span style=\"color:Blue\">return</span> hashCode;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> TestObject : INotifyPropertyChanged\r\n        {\r\n            <span style=\"color:Blue\">public</span> TestObject(<span style=\"color:Blue\">int</span> value)\r\n            {\r\n                Value = value;\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> Value\r\n            {\r\n                <span style=\"color:Blue\">get</span>\r\n                {\r\n                    <span style=\"color:Blue\">return</span> _Value;\r\n                }\r\n                <span style=\"color:Blue\">set</span>\r\n                {\r\n                    _Value = value;\r\n                    NotifyPropertyChanged(<span style=\"color:#A31515\">&quot;Value&quot;</span>);\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">int</span> _Value;\r\n\r\n            <span style=\"color:Blue\">#region</span> ************************* THIS SECTION BREAKS OBTICS **************************\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> Equals(<span style=\"color:Blue\">object</span> obj)\r\n            {\r\n                TestObject other = obj <span style=\"color:Blue\">as</span> TestObject;\r\n                <span style=\"color:Blue\">if</span> (other == <span style=\"color:Blue\">null</span>) <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n\r\n                <span style=\"color:Blue\">return</span>\r\n                    Value == other.Value;\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">int</span> GetHashCode()\r\n            {\r\n                <span style=\"color:Blue\">return</span> Value.GetHashCode();\r\n            }\r\n\r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n            <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> NotifyPropertyChanged(<span style=\"color:Blue\">string</span> propertyName)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n                    PropertyChanged.Invoke(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-01-04T12:14:59.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "275081",
    "ThreadId": "79722",
    "Html": "<p>Hi,</p>\r\n<p>It could very well be that the problem has to do with the equality overrides. The way you implement equality in your TestObject makes it not 'well-behaved' (as described here <a href=\"http://obtics.codeplex.com/wikipage?title=Well-behaved\">http://obtics.codeplex.com/wikipage?title=Well-behaved</a>).</p>\r\n<p>The point is that as soon as you change the value of your Value property the identity of your TestObject changes. Not only Obtics but anything that uses a hashtable will have difficulties with it. You can try placing a TestObject in a HashSet, change its Value and then try to retrieve it again. Obtics uses hashtables extensivly for memoization. With a carrousel it tries to keep down the total allocates size&nbsp;for transformation pipelines.&nbsp;</p>\r\n<p>Many textbooks will say that the way you implemented equality here is fine and proper. These books are wrong! The implementation is not strict enough. The way it is implemented in your Tuple class is correct. In this case the identity never changes because you can't change the values of Value1 and Value2 (provided the values themselves&nbsp;don't change identity as&nbsp;TestObject does.).</p>\r\n<p>That&nbsp;this worked before must have been purely by chance. Proper implementation of equality and functions that always return an equal result when given equal&nbsp;parameters is very important when working with Obtics.</p>\r\n<p>In case you realy need equality implemented the way you have&nbsp;then there&nbsp;could be a solution in the ObticsEqualityComparerAttribute. With this you can specify an alternative EqualityComparer for obtics to use. This will only work though when Obtics manipulates your object directly. See also <a href=\"http://obtics.codeplex.com/WorkItem/View.aspx?WorkItemId=5603\">http://obtics.codeplex.com/WorkItem/View.aspx?WorkItemId=5603</a>, <a href=\"http://obtics.codeplex.com/WorkItem/View.aspx?WorkItemId=5208\">http://obtics.codeplex.com/WorkItem/View.aspx?WorkItemId=5208</a></p>\r\n<p>Hope this helps,</p>\r\n<p>Thomas.</p>",
    "PostedDate": "2010-01-09T02:30:31.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]